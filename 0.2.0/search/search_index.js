var __index = {"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"index.html","title":"Zbrush Addon","text":"<p>This adds integration to Pixologic ZBrush. Pixologic ZBrush is a digital sculpting software which users can do 3D/2.5D modeling, texturing and painting.</p>"},{"location":"index.html#settings","title":"Settings","text":"<p>Path to Zbrush executable must be set in the Ayon Setting in <code>Applications</code> addon (<code>ayon+settings://applications/applications/zbrush</code>) and added in <code>Anatomy</code>.<code>Attributes</code> for particular project to be visible in the Launcher.</p>"},{"location":"index.html#implemented-workflows","title":"Implemented workflows","text":"<p>Currently supports importing/exporting models and saving/opening/publishing workfiles in Zbrush integration. All the associated data would be stored in <code>.zbrushmetadata</code> folder</p>"},{"location":"index.html#how-to-start","title":"How to start","text":"<p>There is a <code>create_package.py</code> python file which contains logic how to create the addon from AYON codebase. Just run the code. ```shell python ./create_package.py</p>"},{"location":"license.html","title":"License","text":"<pre><code>                             Apache License\n                       Version 2.0, January 2004\n                    http://www.apache.org/licenses/\n</code></pre> <p>TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION</p> <ol> <li> <p>Definitions.</p> <p>\"License\" shall mean the terms and conditions for use, reproduction,   and distribution as defined by Sections 1 through 9 of this document.</p> <p>\"Licensor\" shall mean the copyright owner or entity authorized by   the copyright owner that is granting the License.</p> <p>\"Legal Entity\" shall mean the union of the acting entity and all   other entities that control, are controlled by, or are under common   control with that entity. For the purposes of this definition,   \"control\" means (i) the power, direct or indirect, to cause the   direction or management of such entity, whether by contract or   otherwise, or (ii) ownership of fifty percent (50%) or more of the   outstanding shares, or (iii) beneficial ownership of such entity.</p> <p>\"You\" (or \"Your\") shall mean an individual or Legal Entity   exercising permissions granted by this License.</p> <p>\"Source\" form shall mean the preferred form for making modifications,   including but not limited to software source code, documentation   source, and configuration files.</p> <p>\"Object\" form shall mean any form resulting from mechanical   transformation or translation of a Source form, including but   not limited to compiled object code, generated documentation,   and conversions to other media types.</p> <p>\"Work\" shall mean the work of authorship, whether in Source or   Object form, made available under the License, as indicated by a   copyright notice that is included in or attached to the work   (an example is provided in the Appendix below).</p> <p>\"Derivative Works\" shall mean any work, whether in Source or Object   form, that is based on (or derived from) the Work and for which the   editorial revisions, annotations, elaborations, or other modifications   represent, as a whole, an original work of authorship. For the purposes   of this License, Derivative Works shall not include works that remain   separable from, or merely link (or bind by name) to the interfaces of,   the Work and Derivative Works thereof.</p> <p>\"Contribution\" shall mean any work of authorship, including   the original version of the Work and any modifications or additions   to that Work or Derivative Works thereof, that is intentionally   submitted to Licensor for inclusion in the Work by the copyright owner   or by an individual or Legal Entity authorized to submit on behalf of   the copyright owner. For the purposes of this definition, \"submitted\"   means any form of electronic, verbal, or written communication sent   to the Licensor or its representatives, including but not limited to   communication on electronic mailing lists, source code control systems,   and issue tracking systems that are managed by, or on behalf of, the   Licensor for the purpose of discussing and improving the Work, but   excluding communication that is conspicuously marked or otherwise   designated in writing by the copyright owner as \"Not a Contribution.\"</p> <p>\"Contributor\" shall mean Licensor and any individual or Legal Entity   on behalf of whom a Contribution has been received by Licensor and   subsequently incorporated within the Work.</p> </li> <li> <p>Grant of Copyright License. Subject to the terms and conditions of       this License, each Contributor hereby grants to You a perpetual,       worldwide, non-exclusive, no-charge, royalty-free, irrevocable       copyright license to reproduce, prepare Derivative Works of,       publicly display, publicly perform, sublicense, and distribute the       Work and such Derivative Works in Source or Object form.</p> </li> <li> <p>Grant of Patent License. Subject to the terms and conditions of       this License, each Contributor hereby grants to You a perpetual,       worldwide, non-exclusive, no-charge, royalty-free, irrevocable       (except as stated in this section) patent license to make, have made,       use, offer to sell, sell, import, and otherwise transfer the Work,       where such license applies only to those patent claims licensable       by such Contributor that are necessarily infringed by their       Contribution(s) alone or by combination of their Contribution(s)       with the Work to which such Contribution(s) was submitted. If You       institute patent litigation against any entity (including a       cross-claim or counterclaim in a lawsuit) alleging that the Work       or a Contribution incorporated within the Work constitutes direct       or contributory patent infringement, then any patent licenses       granted to You under this License for that Work shall terminate       as of the date such litigation is filed.</p> </li> <li> <p>Redistribution. You may reproduce and distribute copies of the       Work or Derivative Works thereof in any medium, with or without       modifications, and in Source or Object form, provided that You       meet the following conditions:</p> <p>(a) You must give any other recipients of the Work or       Derivative Works a copy of this License; and</p> <p>(b) You must cause any modified files to carry prominent notices       stating that You changed the files; and</p> <p>(c) You must retain, in the Source form of any Derivative Works       that You distribute, all copyright, patent, trademark, and       attribution notices from the Source form of the Work,       excluding those notices that do not pertain to any part of       the Derivative Works; and</p> <p>(d) If the Work includes a \"NOTICE\" text file as part of its       distribution, then any Derivative Works that You distribute must       include a readable copy of the attribution notices contained       within such NOTICE file, excluding those notices that do not       pertain to any part of the Derivative Works, in at least one       of the following places: within a NOTICE text file distributed       as part of the Derivative Works; within the Source form or       documentation, if provided along with the Derivative Works; or,       within a display generated by the Derivative Works, if and       wherever such third-party notices normally appear. The contents       of the NOTICE file are for informational purposes only and       do not modify the License. You may add Your own attribution       notices within Derivative Works that You distribute, alongside       or as an addendum to the NOTICE text from the Work, provided       that such additional attribution notices cannot be construed       as modifying the License.</p> <p>You may add Your own copyright statement to Your modifications and   may provide additional or different license terms and conditions   for use, reproduction, or distribution of Your modifications, or   for any such Derivative Works as a whole, provided Your use,   reproduction, and distribution of the Work otherwise complies with   the conditions stated in this License.</p> </li> <li> <p>Submission of Contributions. Unless You explicitly state otherwise,       any Contribution intentionally submitted for inclusion in the Work       by You to the Licensor shall be under the terms and conditions of       this License, without any additional terms or conditions.       Notwithstanding the above, nothing herein shall supersede or modify       the terms of any separate license agreement you may have executed       with Licensor regarding such Contributions.</p> </li> <li> <p>Trademarks. This License does not grant permission to use the trade       names, trademarks, service marks, or product names of the Licensor,       except as required for reasonable and customary use in describing the       origin of the Work and reproducing the content of the NOTICE file.</p> </li> <li> <p>Disclaimer of Warranty. Unless required by applicable law or       agreed to in writing, Licensor provides the Work (and each       Contributor provides its Contributions) on an \"AS IS\" BASIS,       WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or       implied, including, without limitation, any warranties or conditions       of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A       PARTICULAR PURPOSE. You are solely responsible for determining the       appropriateness of using or redistributing the Work and assume any       risks associated with Your exercise of permissions under this License.</p> </li> <li> <p>Limitation of Liability. In no event and under no legal theory,       whether in tort (including negligence), contract, or otherwise,       unless required by applicable law (such as deliberate and grossly       negligent acts) or agreed to in writing, shall any Contributor be       liable to You for damages, including any direct, indirect, special,       incidental, or consequential damages of any character arising as a       result of this License or out of the use or inability to use the       Work (including but not limited to damages for loss of goodwill,       work stoppage, computer failure or malfunction, or any and all       other commercial damages or losses), even if such Contributor       has been advised of the possibility of such damages.</p> </li> <li> <p>Accepting Warranty or Additional Liability. While redistributing       the Work or Derivative Works thereof, You may choose to offer,       and charge a fee for, acceptance of support, warranty, indemnity,       or other liability obligations and/or rights consistent with this       License. However, in accepting such obligations, You may act only       on Your own behalf and on Your sole responsibility, not on behalf       of any other Contributor, and only if You agree to indemnify,       defend, and hold each Contributor harmless for any liability       incurred by, or claims asserted against, such Contributor by reason       of your accepting any such warranty or additional liability.</p> </li> </ol> <p>END OF TERMS AND CONDITIONS</p> <p>APPENDIX: How to apply the Apache License to your work.</p> <pre><code>  To apply the Apache License to your work, attach the following\n  boilerplate notice, with the fields enclosed by brackets \"[]\"\n  replaced with your own identifying information. (Don't include\n  the brackets!)  The text should be enclosed in the appropriate\n  comment syntax for the file format. We also recommend that a\n  file or class name and description of purpose be included on the\n  same \"printed page\" as the copyright notice for easier\n  identification within third-party archives.\n</code></pre> <p>Copyright [yyyy][name of copyright owner]</p> <p>Licensed under the Apache License, Version 2.0 (the \"License\");    you may not use this file except in compliance with the License.    You may obtain a copy of the License at</p> <pre><code>   http://www.apache.org/licenses/LICENSE-2.0\n</code></pre> <p>Unless required by applicable law or agreed to in writing, software    distributed under the License is distributed on an \"AS IS\" BASIS,    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.    See the License for the specific language governing permissions and    limitations under the License.</p>"},{"location":"autoapi/summary.html","title":"Summary","text":"<ul> <li>client<ul> <li>ayon_zbrush<ul> <li>_run_zscript</li> <li>addon</li> <li>api<ul> <li>communication_server</li> <li>launch_script</li> <li>lib</li> <li>pipeline</li> <li>plugin</li> </ul> </li> <li>hooks<ul> <li>create_zmenu_script</li> <li>pre_subprocess_no_window</li> <li>zbrush_startup_script</li> </ul> </li> <li>plugins<ul> <li>create<ul> <li>create_model</li> <li>create_workfile</li> </ul> </li> <li>load<ul> <li>load_mesh</li> </ul> </li> <li>publish<ul> <li>collect_current_file</li> <li>collect_workfile</li> <li>extract_model</li> <li>increment_workfile_version</li> <li>validate_edit_mode</li> </ul> </li> </ul> </li> <li>version</li> </ul> </li> </ul> </li> <li>server<ul> <li>settings<ul> <li>main</li> </ul> </li> </ul> </li> </ul>"},{"location":"autoapi/client/ayon_zbrush/index.html","title":"ayon_zbrush","text":""},{"location":"autoapi/client/ayon_zbrush/_run_zscript.html","title":"_run_zscript","text":""},{"location":"autoapi/client/ayon_zbrush/_run_zscript.html#client.ayon_zbrush._run_zscript.host_tools_widget","title":"<code>host_tools_widget(launcher_type=None)</code>  <code>async</code>","text":"<p>Connect to WEBSOCKET_URL, call ping() and disconnect.</p> Source code in <code>client/ayon_zbrush/_run_zscript.py</code> <pre><code>async def host_tools_widget(launcher_type=None):\n    \"\"\"Connect to WEBSOCKET_URL, call ping() and disconnect.\"\"\"\n\n    rpc_client = JsonRpcClient()\n    ws_port = os.environ[\"WEBSOCKET_URL\"].split(\":\")[-1]\n    try:\n        await rpc_client.connect(\"localhost\", ws_port)\n        await rpc_client.call(launcher_type)\n    finally:\n        await rpc_client.disconnect()\n</code></pre>"},{"location":"autoapi/client/ayon_zbrush/addon.html","title":"addon","text":""},{"location":"autoapi/client/ayon_zbrush/version.html","title":"version","text":"<p>Package declaring AYON addon 'zbrush' version.</p>"},{"location":"autoapi/client/ayon_zbrush/api/index.html","title":"api","text":"<p>Public API for Zbrush</p>"},{"location":"autoapi/client/ayon_zbrush/api/index.html#client.ayon_zbrush.api.CommunicationWrapper","title":"<code>CommunicationWrapper</code>","text":"Source code in <code>client/ayon_zbrush/api/communication_server.py</code> <pre><code>class CommunicationWrapper:\n    # TODO add logs and exceptions\n    communicator = None\n\n    log = logging.getLogger(\"CommunicationWrapper\")\n\n    @classmethod\n    def create_qt_communicator(cls, *args, **kwargs):\n        \"\"\"Create communicator for Artist usage.\"\"\"\n        communicator = QtCommunicator(*args, **kwargs)\n        cls.set_communicator(communicator)\n        return communicator\n\n    @classmethod\n    def set_communicator(cls, communicator):\n        if not cls.communicator:\n            cls.communicator = communicator\n        else:\n            cls.log.warning(\"Communicator was set multiple times.\")\n\n    @classmethod\n    def client(cls):\n        if not cls.communicator:\n            return None\n        return cls.communicator.client()\n\n    @classmethod\n    def execute_zscript(cls, zscript):\n        \"\"\"Execute passed zscript in Zbrush.\"\"\"\n        if not cls.communicator:\n            return\n        return cls.communicator.execute_zscript(zscript)\n</code></pre>"},{"location":"autoapi/client/ayon_zbrush/api/index.html#client.ayon_zbrush.api.CommunicationWrapper.create_qt_communicator","title":"<code>create_qt_communicator(*args, **kwargs)</code>  <code>classmethod</code>","text":"<p>Create communicator for Artist usage.</p> Source code in <code>client/ayon_zbrush/api/communication_server.py</code> <pre><code>@classmethod\ndef create_qt_communicator(cls, *args, **kwargs):\n    \"\"\"Create communicator for Artist usage.\"\"\"\n    communicator = QtCommunicator(*args, **kwargs)\n    cls.set_communicator(communicator)\n    return communicator\n</code></pre>"},{"location":"autoapi/client/ayon_zbrush/api/index.html#client.ayon_zbrush.api.CommunicationWrapper.execute_zscript","title":"<code>execute_zscript(zscript)</code>  <code>classmethod</code>","text":"<p>Execute passed zscript in Zbrush.</p> Source code in <code>client/ayon_zbrush/api/communication_server.py</code> <pre><code>@classmethod\ndef execute_zscript(cls, zscript):\n    \"\"\"Execute passed zscript in Zbrush.\"\"\"\n    if not cls.communicator:\n        return\n    return cls.communicator.execute_zscript(zscript)\n</code></pre>"},{"location":"autoapi/client/ayon_zbrush/api/index.html#client.ayon_zbrush.api.ZbrushHost","title":"<code>ZbrushHost</code>","text":"<p>               Bases: <code>HostBase</code>, <code>IWorkfileHost</code>, <code>ILoadHost</code>, <code>IPublishHost</code></p> Source code in <code>client/ayon_zbrush/api/pipeline.py</code> <pre><code>class ZbrushHost(HostBase, IWorkfileHost, ILoadHost, IPublishHost):\n    name = \"zbrush\"\n\n    def install(self):\n        # Create workdir folder if does not exist yet\n        workdir = os.getenv(\"AYON_WORKDIR\")\n        if not os.path.exists(workdir):\n            os.makedirs(workdir)\n\n        plugins_dir = os.path.join(ZBRUSH_HOST_DIR, \"plugins\")\n        publish_dir = os.path.join(plugins_dir, \"publish\")\n        load_dir = os.path.join(plugins_dir, \"load\")\n        create_dir = os.path.join(plugins_dir, \"create\")\n\n        pyblish.api.register_host(\"zbrush\")\n        pyblish.api.register_plugin_path(publish_dir)\n        register_loader_plugin_path(load_dir)\n        register_creator_plugin_path(create_dir)\n\n        register_event_callback(\"application.launched\", self.initial_app_launch)\n        register_event_callback(\"application.exit\", self.application_exit)\n\n    def get_current_project_name(self):\n        \"\"\"\n        Returns:\n            Union[str, None]: Current project name.\n        \"\"\"\n\n        return self.get_current_context().get(\"project_name\")\n\n    def get_current_folder_path(self):\n        \"\"\"\n        Returns:\n            Union[str, None]: Current folder path.\n        \"\"\"\n\n        return self.get_current_context().get(\"folder_path\")\n\n    def get_current_task_name(self):\n        \"\"\"\n        Returns:\n            Union[str, None]: Current task name.\n        \"\"\"\n\n        return self.get_current_context().get(\"task_name\")\n\n    def get_current_context(self):\n        context = get_current_workfile_context()\n        if not context:\n            return get_global_context()\n        if \"project_name\" in context:\n            return context\n        # This is legacy way how context was stored\n        return {\n            \"project_name\": context.get(\"project_name\"),\n            \"folder_path\": context.get(\"folder_path\"),\n            \"task_name\": context.get(\"task_name\")\n        }\n\n    # --- Workfile ---\n    def open_workfile(self, filepath):\n        filepath = filepath.replace(\"\\\\\", \"/\")\n        execute_zscript(f\"\"\"\n[IFreeze,\n    [FileNameSetNext, \"{filepath}\"]\n    [IKeyPress, 13, [IPress, File:Open:Open]]]\n]\n    \"\"\")\n        set_current_file(filepath=filepath)\n        return filepath\n\n    def save_workfile(self, filepath=None):\n        if not filepath:\n            filepath = self.get_current_workfile()\n        filepath = filepath.replace(\"\\\\\", \"/\")\n        # # move the json data to the files\n        # # shutil.copy\n        copy_ayon_data(filepath)\n        set_current_file(filepath=filepath)\n        execute_zscript(f\"\"\"\n[IFreeze,\n    [FileNameSetNext, \"{filepath}\"]\n    [IKeyPress, 13, [IPress, File:SaveAs:SaveAs]]]\n]\n\"\"\")\n        return filepath\n\n    def get_current_workfile(self):\n        work_dir = get_workdir()\n        txt_dir = os.path.join(\n            work_dir, \".zbrush_metadata\").replace(\n                \"\\\\\", \"/\"\n        )\n        with open (f\"{txt_dir}/current_file.txt\", \"r\") as current_file:\n            content = str(current_file.read())\n            filepath = content.rstrip('\\x00')\n            current_file.close()\n            return filepath\n\n    def workfile_has_unsaved_changes(self):\n        # Pop-up dialog would be located to ask if users\n        # save scene if it has unsaved changes\n        return True\n\n    def get_workfile_extensions(self):\n        return [\".zpr\"]\n\n    def list_instances(self):\n        \"\"\"Get all AYON instances.\"\"\"\n        # Figure out how to deal with this\n        return get_instance_workfile_metadata()\n\n    def write_instances(self, data):\n        \"\"\"Write all AYON instances\"\"\"\n        return write_workfile_metadata(ZBRUSH_SECTION_NAME_INSTANCES, data)\n\n    def get_containers(self):\n        \"\"\"Get the data of the containers\n\n        Returns:\n            list: the list which stores the data of the containers\n        \"\"\"\n        return get_containers()\n\n    def initial_app_launch(self):\n        \"\"\"Triggers on launch of the communication server for Zbrush.\n\n        Usually this aligns roughly with the start of Zbrush.\n        \"\"\"\n        #TODO: figure out how to deal with the last workfile issue\n        set_current_file()\n        context = get_global_context()\n        save_current_workfile_context(context)\n\n    def application_exit(self):\n        \"\"\"Logic related to TimerManager.\n\n        Todo:\n            This should be handled out of Zbrush integration logic.\n        \"\"\"\n        remove_tmp_data()\n        data = get_current_project_settings()\n        stop_timer = data[\"zbrush\"][\"stop_timer_on_application_exit\"]\n\n        if not stop_timer:\n            return\n\n        # Stop application timer.\n        webserver_url = os.environ.get(\"AYON_WEBSERVER_URL\")\n        rest_api_url = \"{}/timers_manager/stop_timer\".format(webserver_url)\n        requests.post(rest_api_url)\n\n    def update_context_data(self, data, changes):\n        return write_workfile_metadata(ZBRUSH_METADATA_CREATE_CONTEXT, data)\n\n    def get_context_data(self):\n        get_load_workfile_metadata(ZBRUSH_METADATA_CREATE_CONTEXT)\n</code></pre>"},{"location":"autoapi/client/ayon_zbrush/api/index.html#client.ayon_zbrush.api.ZbrushHost.application_exit","title":"<code>application_exit()</code>","text":"<p>Logic related to TimerManager.</p> Todo <p>This should be handled out of Zbrush integration logic.</p> Source code in <code>client/ayon_zbrush/api/pipeline.py</code> <pre><code>def application_exit(self):\n    \"\"\"Logic related to TimerManager.\n\n    Todo:\n        This should be handled out of Zbrush integration logic.\n    \"\"\"\n    remove_tmp_data()\n    data = get_current_project_settings()\n    stop_timer = data[\"zbrush\"][\"stop_timer_on_application_exit\"]\n\n    if not stop_timer:\n        return\n\n    # Stop application timer.\n    webserver_url = os.environ.get(\"AYON_WEBSERVER_URL\")\n    rest_api_url = \"{}/timers_manager/stop_timer\".format(webserver_url)\n    requests.post(rest_api_url)\n</code></pre>"},{"location":"autoapi/client/ayon_zbrush/api/index.html#client.ayon_zbrush.api.ZbrushHost.get_containers","title":"<code>get_containers()</code>","text":"<p>Get the data of the containers</p> <p>Returns:</p> Name Type Description <code>list</code> <p>the list which stores the data of the containers</p> Source code in <code>client/ayon_zbrush/api/pipeline.py</code> <pre><code>def get_containers(self):\n    \"\"\"Get the data of the containers\n\n    Returns:\n        list: the list which stores the data of the containers\n    \"\"\"\n    return get_containers()\n</code></pre>"},{"location":"autoapi/client/ayon_zbrush/api/index.html#client.ayon_zbrush.api.ZbrushHost.get_current_folder_path","title":"<code>get_current_folder_path()</code>","text":"<p>Returns:</p> Type Description <p>Union[str, None]: Current folder path.</p> Source code in <code>client/ayon_zbrush/api/pipeline.py</code> <pre><code>def get_current_folder_path(self):\n    \"\"\"\n    Returns:\n        Union[str, None]: Current folder path.\n    \"\"\"\n\n    return self.get_current_context().get(\"folder_path\")\n</code></pre>"},{"location":"autoapi/client/ayon_zbrush/api/index.html#client.ayon_zbrush.api.ZbrushHost.get_current_project_name","title":"<code>get_current_project_name()</code>","text":"<p>Returns:</p> Type Description <p>Union[str, None]: Current project name.</p> Source code in <code>client/ayon_zbrush/api/pipeline.py</code> <pre><code>def get_current_project_name(self):\n    \"\"\"\n    Returns:\n        Union[str, None]: Current project name.\n    \"\"\"\n\n    return self.get_current_context().get(\"project_name\")\n</code></pre>"},{"location":"autoapi/client/ayon_zbrush/api/index.html#client.ayon_zbrush.api.ZbrushHost.get_current_task_name","title":"<code>get_current_task_name()</code>","text":"<p>Returns:</p> Type Description <p>Union[str, None]: Current task name.</p> Source code in <code>client/ayon_zbrush/api/pipeline.py</code> <pre><code>def get_current_task_name(self):\n    \"\"\"\n    Returns:\n        Union[str, None]: Current task name.\n    \"\"\"\n\n    return self.get_current_context().get(\"task_name\")\n</code></pre>"},{"location":"autoapi/client/ayon_zbrush/api/index.html#client.ayon_zbrush.api.ZbrushHost.initial_app_launch","title":"<code>initial_app_launch()</code>","text":"<p>Triggers on launch of the communication server for Zbrush.</p> <p>Usually this aligns roughly with the start of Zbrush.</p> Source code in <code>client/ayon_zbrush/api/pipeline.py</code> <pre><code>def initial_app_launch(self):\n    \"\"\"Triggers on launch of the communication server for Zbrush.\n\n    Usually this aligns roughly with the start of Zbrush.\n    \"\"\"\n    #TODO: figure out how to deal with the last workfile issue\n    set_current_file()\n    context = get_global_context()\n    save_current_workfile_context(context)\n</code></pre>"},{"location":"autoapi/client/ayon_zbrush/api/index.html#client.ayon_zbrush.api.ZbrushHost.list_instances","title":"<code>list_instances()</code>","text":"<p>Get all AYON instances.</p> Source code in <code>client/ayon_zbrush/api/pipeline.py</code> <pre><code>def list_instances(self):\n    \"\"\"Get all AYON instances.\"\"\"\n    # Figure out how to deal with this\n    return get_instance_workfile_metadata()\n</code></pre>"},{"location":"autoapi/client/ayon_zbrush/api/index.html#client.ayon_zbrush.api.ZbrushHost.write_instances","title":"<code>write_instances(data)</code>","text":"<p>Write all AYON instances</p> Source code in <code>client/ayon_zbrush/api/pipeline.py</code> <pre><code>def write_instances(self, data):\n    \"\"\"Write all AYON instances\"\"\"\n    return write_workfile_metadata(ZBRUSH_SECTION_NAME_INSTANCES, data)\n</code></pre>"},{"location":"autoapi/client/ayon_zbrush/api/communication_server.html","title":"communication_server","text":""},{"location":"autoapi/client/ayon_zbrush/api/communication_server.html#client.ayon_zbrush.api.communication_server.BaseCommunicator","title":"<code>BaseCommunicator</code>","text":"Source code in <code>client/ayon_zbrush/api/communication_server.py</code> <pre><code>class BaseCommunicator:\n    def __init__(self):\n        self.process = None\n        self.websocket_server = None\n        self.websocket_rpc = None\n        self.exit_code = None\n        self._connected_client = None\n\n    @property\n    def server_is_running(self):\n        if self.websocket_server is None:\n            return False\n        return self.websocket_server.server_is_running\n\n    def _windows_file_process(self, src_dst_mapping, to_remove):\n        \"\"\"Windows specific file processing asking for admin permissions.\n\n        It is required to have administration permissions to modify plugin\n        files in Zbrush installation folder.\n\n        Method requires `pywin32` python module.\n\n        Args:\n            src_dst_mapping (list, tuple, set): Mapping of source file to\n                destination. Both must be full path. Each item must be iterable\n                of size 2 `(C:/src/file.dll, C:/dst/file.dll)`.\n            to_remove (list): Fullpath to files that should be removed.\n        \"\"\"\n\n        import pythoncom\n        from win32comext.shell import shell\n\n        # Create temp folder where plugin files are temporary copied\n        # - reason is that copy to Zbrush requires administrator permissions\n        #   but admin may not have access to source folder\n        tmp_dir = os.path.normpath(\n            tempfile.mkdtemp(prefix=\"Zbrush_copy_\")\n        )\n\n        # Copy source to temp folder and create new mapping\n        dst_folders = collections.defaultdict(list)\n        new_src_dst_mapping = []\n        for old_src, dst in src_dst_mapping:\n            new_src = os.path.join(tmp_dir, os.path.split(old_src)[1])\n            shutil.copy(old_src, new_src)\n            new_src_dst_mapping.append((new_src, dst))\n\n        for src, dst in new_src_dst_mapping:\n            src = os.path.normpath(src)\n            dst = os.path.normpath(dst)\n            dst_filename = os.path.basename(dst)\n            dst_folder_path = os.path.dirname(dst)\n            dst_folders[dst_folder_path].append((dst_filename, src))\n\n        # create an instance of IFileOperation\n        fo = pythoncom.CoCreateInstance(\n            shell.CLSID_FileOperation,\n            None,\n            pythoncom.CLSCTX_ALL,\n            shell.IID_IFileOperation\n        )\n        # Add delete command to file operation object\n        for filepath in to_remove:\n            item = shell.SHCreateItemFromParsingName(\n                filepath, None, shell.IID_IShellItem\n            )\n            fo.DeleteItem(item)\n\n        # here you can use SetOperationFlags, progress Sinks, etc.\n        for folder_path, items in dst_folders.items():\n            # create an instance of IShellItem for the target folder\n            folder_item = shell.SHCreateItemFromParsingName(\n                folder_path, None, shell.IID_IShellItem\n            )\n            for _dst_filename, source_file_path in items:\n                # create an instance of IShellItem for the source item\n                copy_item = shell.SHCreateItemFromParsingName(\n                    source_file_path, None, shell.IID_IShellItem\n                )\n                # queue the copy operation\n                fo.CopyItem(copy_item, folder_item, _dst_filename, None)\n\n        # commit\n        fo.PerformOperations()\n\n        # Remove temp folder\n        shutil.rmtree(tmp_dir)\n\n    def _launch_zbrush(self, launch_args):\n        flags = (\n            subprocess.DETACHED_PROCESS\n            | subprocess.CREATE_NEW_PROCESS_GROUP\n        )\n        env = os.environ.copy()\n\n        kwargs = {\n            \"env\": env,\n            \"creationflags\": flags\n        }\n        self.process = subprocess.Popen(launch_args, **kwargs)\n\n    def _create_routes(self):\n        self.websocket_rpc = BaseZbrushRpc(\n            self, loop=self.websocket_server.loop\n        )\n        self.websocket_server.add_route(\n            \"*\", \"/\", self.websocket_rpc.handle_request\n        )\n\n    def _start_webserver(self):\n        self.websocket_server.start()\n        # Make sure RPC is using same loop as websocket server\n        while not self.websocket_server.server_is_running:\n            time.sleep(0.1)\n\n    def _stop_webserver(self):\n        self.websocket_server.stop()\n\n    def _exit(self, exit_code=None):\n        self._stop_webserver()\n        self._remove_zscript_menu()\n        if exit_code is not None:\n            self.exit_code = exit_code\n\n        if self.exit_code is None:\n            self.exit_code = 0\n\n    def _remove_zscript_menu(self):\n        menu_txt_dir = os.path.join(\n            ZBRUSH_HOST_DIR, \"api\", \"zscripts\")\n        for filepath in os.listdir(menu_txt_dir):\n            os.remove(os.path.join(menu_txt_dir, filepath))\n\n    def stop(self):\n        \"\"\"Stop communication and currently running python process.\"\"\"\n        log.info(\"Stopping communication\")\n        self._exit()\n\n    def launch(self, launch_args):\n        \"\"\"Prepare all required data and launch host.\n\n        First is prepared websocket server as communication point for host,\n        when server is ready to use host is launched as subprocess.\n        \"\"\"\n        # Launch Zbrush and the websocket server.\n        log.info(\"Launching Zbrush\")\n        self.websocket_server = WebSocketServer()\n\n        self._create_routes()\n\n        os.environ[\"WEBSOCKET_URL\"] = \"ws://localhost:{}\".format(\n            self.websocket_server.port\n        )\n\n        log.info(\"Added request handler for url: {}\".format(\n            os.environ[\"WEBSOCKET_URL\"]\n        ))\n\n        self._start_webserver()\n\n        # Start Zbrush when server is running\n        self._launch_zbrush(launch_args)\n\n        log.info(\"Waiting for client connection\")\n        while True:\n            if self.process.poll() is not None:\n                log.debug(\"Host process is not alive. Exiting\")\n                self._exit(1)\n                return\n\n            if self.websocket_rpc.client_connected():\n                log.info(\"Client has connected\")\n                break\n            time.sleep(0.5)\n\n        self._on_client_connect()\n\n        emit_event(\"application.launched\")\n\n    def _on_client_connect(self):\n        self._initial_textfile_write()\n\n    def _initial_textfile_write(self):\n        \"\"\"Make sure the zscript menu already installed\n        when starting Zbrush.\"\"\"\n        menu_txt_filepath = os.path.join(\n            ZBRUSH_HOST_DIR, \"api\", \"zscripts\", \"ayon_zbrush_menu.txt\")\n        menu_filepath = menu_txt_filepath.replace(\"\\\\\", \"/\")\n        if menu_filepath is None:\n            log.warning(\n                \"No ayon menu installed in Zbrush.\"\n            )\n\n    def _client(self):\n        if not self.websocket_rpc:\n            log.warning(\"Communicator's server did not start yet.\")\n            return None\n\n        for client in self.websocket_rpc.clients:\n            if not client.ws.closed:\n                return client\n        log.warning(\"Client is not yet connected to Communicator.\")\n        return None\n\n    def client(self):\n        if not self._connected_client or self._connected_client.ws.closed:\n            self._connected_client = self._client()\n        return self._connected_client\n\n    def send_request(self, method, params=None):\n        client = self.client()\n        if not client:\n            return\n\n        return self.websocket_rpc.send_request(\n            client, method, params\n        )\n\n    def send_notification(self, method, params=None):\n        client = self.client()\n        if not client:\n            return\n\n        self.websocket_rpc.send_notification(\n            client, method, params\n        )\n\n    def execute_zscript(self, zscript):\n        \"\"\"Execute passed zscript in Zbrush.\"\"\"\n        zbrush_exe = os.environ[\"ZBRUSH_EXE\"]\n        with tempfile.NamedTemporaryFile(\n            mode=\"wt\", prefix=\"a_zb_\", suffix=\".txt\", delete=False\n        ) as f:\n            f.write(zscript)\n\n        with delete_after(f.name):\n            subprocess.call([zbrush_exe, f.name], shell=True)\n</code></pre>"},{"location":"autoapi/client/ayon_zbrush/api/communication_server.html#client.ayon_zbrush.api.communication_server.BaseCommunicator.execute_zscript","title":"<code>execute_zscript(zscript)</code>","text":"<p>Execute passed zscript in Zbrush.</p> Source code in <code>client/ayon_zbrush/api/communication_server.py</code> <pre><code>def execute_zscript(self, zscript):\n    \"\"\"Execute passed zscript in Zbrush.\"\"\"\n    zbrush_exe = os.environ[\"ZBRUSH_EXE\"]\n    with tempfile.NamedTemporaryFile(\n        mode=\"wt\", prefix=\"a_zb_\", suffix=\".txt\", delete=False\n    ) as f:\n        f.write(zscript)\n\n    with delete_after(f.name):\n        subprocess.call([zbrush_exe, f.name], shell=True)\n</code></pre>"},{"location":"autoapi/client/ayon_zbrush/api/communication_server.html#client.ayon_zbrush.api.communication_server.BaseCommunicator.launch","title":"<code>launch(launch_args)</code>","text":"<p>Prepare all required data and launch host.</p> <p>First is prepared websocket server as communication point for host, when server is ready to use host is launched as subprocess.</p> Source code in <code>client/ayon_zbrush/api/communication_server.py</code> <pre><code>def launch(self, launch_args):\n    \"\"\"Prepare all required data and launch host.\n\n    First is prepared websocket server as communication point for host,\n    when server is ready to use host is launched as subprocess.\n    \"\"\"\n    # Launch Zbrush and the websocket server.\n    log.info(\"Launching Zbrush\")\n    self.websocket_server = WebSocketServer()\n\n    self._create_routes()\n\n    os.environ[\"WEBSOCKET_URL\"] = \"ws://localhost:{}\".format(\n        self.websocket_server.port\n    )\n\n    log.info(\"Added request handler for url: {}\".format(\n        os.environ[\"WEBSOCKET_URL\"]\n    ))\n\n    self._start_webserver()\n\n    # Start Zbrush when server is running\n    self._launch_zbrush(launch_args)\n\n    log.info(\"Waiting for client connection\")\n    while True:\n        if self.process.poll() is not None:\n            log.debug(\"Host process is not alive. Exiting\")\n            self._exit(1)\n            return\n\n        if self.websocket_rpc.client_connected():\n            log.info(\"Client has connected\")\n            break\n        time.sleep(0.5)\n\n    self._on_client_connect()\n\n    emit_event(\"application.launched\")\n</code></pre>"},{"location":"autoapi/client/ayon_zbrush/api/communication_server.html#client.ayon_zbrush.api.communication_server.BaseCommunicator.stop","title":"<code>stop()</code>","text":"<p>Stop communication and currently running python process.</p> Source code in <code>client/ayon_zbrush/api/communication_server.py</code> <pre><code>def stop(self):\n    \"\"\"Stop communication and currently running python process.\"\"\"\n    log.info(\"Stopping communication\")\n    self._exit()\n</code></pre>"},{"location":"autoapi/client/ayon_zbrush/api/communication_server.html#client.ayon_zbrush.api.communication_server.CommunicationWrapper","title":"<code>CommunicationWrapper</code>","text":"Source code in <code>client/ayon_zbrush/api/communication_server.py</code> <pre><code>class CommunicationWrapper:\n    # TODO add logs and exceptions\n    communicator = None\n\n    log = logging.getLogger(\"CommunicationWrapper\")\n\n    @classmethod\n    def create_qt_communicator(cls, *args, **kwargs):\n        \"\"\"Create communicator for Artist usage.\"\"\"\n        communicator = QtCommunicator(*args, **kwargs)\n        cls.set_communicator(communicator)\n        return communicator\n\n    @classmethod\n    def set_communicator(cls, communicator):\n        if not cls.communicator:\n            cls.communicator = communicator\n        else:\n            cls.log.warning(\"Communicator was set multiple times.\")\n\n    @classmethod\n    def client(cls):\n        if not cls.communicator:\n            return None\n        return cls.communicator.client()\n\n    @classmethod\n    def execute_zscript(cls, zscript):\n        \"\"\"Execute passed zscript in Zbrush.\"\"\"\n        if not cls.communicator:\n            return\n        return cls.communicator.execute_zscript(zscript)\n</code></pre>"},{"location":"autoapi/client/ayon_zbrush/api/communication_server.html#client.ayon_zbrush.api.communication_server.CommunicationWrapper.create_qt_communicator","title":"<code>create_qt_communicator(*args, **kwargs)</code>  <code>classmethod</code>","text":"<p>Create communicator for Artist usage.</p> Source code in <code>client/ayon_zbrush/api/communication_server.py</code> <pre><code>@classmethod\ndef create_qt_communicator(cls, *args, **kwargs):\n    \"\"\"Create communicator for Artist usage.\"\"\"\n    communicator = QtCommunicator(*args, **kwargs)\n    cls.set_communicator(communicator)\n    return communicator\n</code></pre>"},{"location":"autoapi/client/ayon_zbrush/api/communication_server.html#client.ayon_zbrush.api.communication_server.CommunicationWrapper.execute_zscript","title":"<code>execute_zscript(zscript)</code>  <code>classmethod</code>","text":"<p>Execute passed zscript in Zbrush.</p> Source code in <code>client/ayon_zbrush/api/communication_server.py</code> <pre><code>@classmethod\ndef execute_zscript(cls, zscript):\n    \"\"\"Execute passed zscript in Zbrush.\"\"\"\n    if not cls.communicator:\n        return\n    return cls.communicator.execute_zscript(zscript)\n</code></pre>"},{"location":"autoapi/client/ayon_zbrush/api/communication_server.html#client.ayon_zbrush.api.communication_server.MainThreadItem","title":"<code>MainThreadItem</code>","text":"<p>Structure to store information about callback in main thread.</p> <p>Item should be used to execute callback in main thread which may be needed for execution of Qt objects.</p> <p>Item store callback (callable variable), arguments and keyword arguments for the callback. Item hold information about it's process.</p> Source code in <code>client/ayon_zbrush/api/communication_server.py</code> <pre><code>class MainThreadItem:\n    \"\"\"Structure to store information about callback in main thread.\n\n    Item should be used to execute callback in main thread which may be needed\n    for execution of Qt objects.\n\n    Item store callback (callable variable), arguments and keyword arguments\n    for the callback. Item hold information about it's process.\n    \"\"\"\n    not_set = object()\n    sleep_time = 0.1\n\n    def __init__(self, callback, *args, **kwargs):\n        self.done = False\n        self.exception = self.not_set\n        self.result = self.not_set\n        self.callback = callback\n        self.args = args\n        self.kwargs = kwargs\n\n    def execute(self):\n        \"\"\"Execute callback and store its result.\n\n        Method must be called from main thread. Item is marked as `done`\n        when callback execution finished. Store output of callback of exception\n        information when callback raises one.\n        \"\"\"\n        log.debug(\"Executing process in main thread\")\n        if self.done:\n            log.warning(\"- item is already processed\")\n            return\n\n        callback = self.callback\n        args = self.args\n        kwargs = self.kwargs\n        log.info(\"Running callback: {}\".format(str(callback)))\n        try:\n            result = callback(*args, **kwargs)\n            self.result = result\n\n        except Exception as exc:\n            self.exception = exc\n\n        finally:\n            self.done = True\n\n    def wait(self):\n        \"\"\"Wait for result from main thread.\n\n        This method stops current thread until callback is executed.\n\n        Returns:\n            object: Output of callback. May be any type or object.\n\n        Raises:\n            Exception: Reraise any exception that happened during callback\n                execution.\n        \"\"\"\n        while not self.done:\n            time.sleep(self.sleep_time)\n\n        if self.exception is self.not_set:\n            return self.result\n        raise self.exception\n\n    async def async_wait(self):\n        \"\"\"Wait for result from main thread.\n\n        Returns:\n            object: Output of callback. May be any type or object.\n\n        Raises:\n            Exception: Reraise any exception that happened during callback\n                execution.\n        \"\"\"\n        while not self.done:\n            await asyncio.sleep(self.sleep_time)\n\n        if self.exception is self.not_set:\n            return self.result\n        raise self.exception\n</code></pre>"},{"location":"autoapi/client/ayon_zbrush/api/communication_server.html#client.ayon_zbrush.api.communication_server.MainThreadItem.async_wait","title":"<code>async_wait()</code>  <code>async</code>","text":"<p>Wait for result from main thread.</p> <p>Returns:</p> Name Type Description <code>object</code> <p>Output of callback. May be any type or object.</p> <p>Raises:</p> Type Description <code>Exception</code> <p>Reraise any exception that happened during callback execution.</p> Source code in <code>client/ayon_zbrush/api/communication_server.py</code> <pre><code>async def async_wait(self):\n    \"\"\"Wait for result from main thread.\n\n    Returns:\n        object: Output of callback. May be any type or object.\n\n    Raises:\n        Exception: Reraise any exception that happened during callback\n            execution.\n    \"\"\"\n    while not self.done:\n        await asyncio.sleep(self.sleep_time)\n\n    if self.exception is self.not_set:\n        return self.result\n    raise self.exception\n</code></pre>"},{"location":"autoapi/client/ayon_zbrush/api/communication_server.html#client.ayon_zbrush.api.communication_server.MainThreadItem.execute","title":"<code>execute()</code>","text":"<p>Execute callback and store its result.</p> <p>Method must be called from main thread. Item is marked as <code>done</code> when callback execution finished. Store output of callback of exception information when callback raises one.</p> Source code in <code>client/ayon_zbrush/api/communication_server.py</code> <pre><code>def execute(self):\n    \"\"\"Execute callback and store its result.\n\n    Method must be called from main thread. Item is marked as `done`\n    when callback execution finished. Store output of callback of exception\n    information when callback raises one.\n    \"\"\"\n    log.debug(\"Executing process in main thread\")\n    if self.done:\n        log.warning(\"- item is already processed\")\n        return\n\n    callback = self.callback\n    args = self.args\n    kwargs = self.kwargs\n    log.info(\"Running callback: {}\".format(str(callback)))\n    try:\n        result = callback(*args, **kwargs)\n        self.result = result\n\n    except Exception as exc:\n        self.exception = exc\n\n    finally:\n        self.done = True\n</code></pre>"},{"location":"autoapi/client/ayon_zbrush/api/communication_server.html#client.ayon_zbrush.api.communication_server.MainThreadItem.wait","title":"<code>wait()</code>","text":"<p>Wait for result from main thread.</p> <p>This method stops current thread until callback is executed.</p> <p>Returns:</p> Name Type Description <code>object</code> <p>Output of callback. May be any type or object.</p> <p>Raises:</p> Type Description <code>Exception</code> <p>Reraise any exception that happened during callback execution.</p> Source code in <code>client/ayon_zbrush/api/communication_server.py</code> <pre><code>def wait(self):\n    \"\"\"Wait for result from main thread.\n\n    This method stops current thread until callback is executed.\n\n    Returns:\n        object: Output of callback. May be any type or object.\n\n    Raises:\n        Exception: Reraise any exception that happened during callback\n            execution.\n    \"\"\"\n    while not self.done:\n        time.sleep(self.sleep_time)\n\n    if self.exception is self.not_set:\n        return self.result\n    raise self.exception\n</code></pre>"},{"location":"autoapi/client/ayon_zbrush/api/communication_server.html#client.ayon_zbrush.api.communication_server.QtCommunicator","title":"<code>QtCommunicator</code>","text":"<p>               Bases: <code>BaseCommunicator</code></p> Source code in <code>client/ayon_zbrush/api/communication_server.py</code> <pre><code>class QtCommunicator(BaseCommunicator):\n\n    def __init__(self, qt_app):\n        super().__init__()\n        self.callback_queue = collections.deque()\n        self.qt_app = qt_app\n\n    def _create_routes(self):\n        self.websocket_rpc = QtZbrushRpc(\n            self, loop=self.websocket_server.loop\n        )\n        self.websocket_server.add_route(\n            \"*\", \"/\", self.websocket_rpc.handle_request\n        )\n\n    def execute_in_main_thread(self, main_thread_item, wait=True):\n        \"\"\"Add `MainThreadItem` to callback queue and wait for result.\"\"\"\n        self.callback_queue.append(main_thread_item)\n        if wait:\n            return main_thread_item.wait()\n        return\n\n    async def async_execute_in_main_thread(self, main_thread_item, wait=True):\n        \"\"\"Add `MainThreadItem` to callback queue and wait for result.\"\"\"\n        self.callback_queue.append(main_thread_item)\n        if wait:\n            return await main_thread_item.async_wait()\n\n    def main_thread_listen(self):\n        \"\"\"Get last `MainThreadItem` from queue.\n\n        Must be called from main thread.\n\n        Method checks if host process is still running as it may cause\n        issues if not.\n        \"\"\"\n        # check if host still running\n        if self.process.poll() is not None:\n            self._exit()\n            return None\n\n        if self.callback_queue:\n            return self.callback_queue.popleft()\n        return None\n\n    def _exit(self, *args, **kwargs):\n        super()._exit(*args, **kwargs)\n        emit_event(\"application.exit\")\n        # # remove zsc script of env variable\n        startup_zsc = os.path.join(\n            ZBRUSH_HOST_DIR, \"startup\", \"startup.zsc\")\n        if os.path.exists(startup_zsc):\n            os.remove(startup_zsc)\n        self.qt_app.exit(self.exit_code)\n</code></pre>"},{"location":"autoapi/client/ayon_zbrush/api/communication_server.html#client.ayon_zbrush.api.communication_server.QtCommunicator.async_execute_in_main_thread","title":"<code>async_execute_in_main_thread(main_thread_item, wait=True)</code>  <code>async</code>","text":"<p>Add <code>MainThreadItem</code> to callback queue and wait for result.</p> Source code in <code>client/ayon_zbrush/api/communication_server.py</code> <pre><code>async def async_execute_in_main_thread(self, main_thread_item, wait=True):\n    \"\"\"Add `MainThreadItem` to callback queue and wait for result.\"\"\"\n    self.callback_queue.append(main_thread_item)\n    if wait:\n        return await main_thread_item.async_wait()\n</code></pre>"},{"location":"autoapi/client/ayon_zbrush/api/communication_server.html#client.ayon_zbrush.api.communication_server.QtCommunicator.execute_in_main_thread","title":"<code>execute_in_main_thread(main_thread_item, wait=True)</code>","text":"<p>Add <code>MainThreadItem</code> to callback queue and wait for result.</p> Source code in <code>client/ayon_zbrush/api/communication_server.py</code> <pre><code>def execute_in_main_thread(self, main_thread_item, wait=True):\n    \"\"\"Add `MainThreadItem` to callback queue and wait for result.\"\"\"\n    self.callback_queue.append(main_thread_item)\n    if wait:\n        return main_thread_item.wait()\n    return\n</code></pre>"},{"location":"autoapi/client/ayon_zbrush/api/communication_server.html#client.ayon_zbrush.api.communication_server.QtCommunicator.main_thread_listen","title":"<code>main_thread_listen()</code>","text":"<p>Get last <code>MainThreadItem</code> from queue.</p> <p>Must be called from main thread.</p> <p>Method checks if host process is still running as it may cause issues if not.</p> Source code in <code>client/ayon_zbrush/api/communication_server.py</code> <pre><code>def main_thread_listen(self):\n    \"\"\"Get last `MainThreadItem` from queue.\n\n    Must be called from main thread.\n\n    Method checks if host process is still running as it may cause\n    issues if not.\n    \"\"\"\n    # check if host still running\n    if self.process.poll() is not None:\n        self._exit()\n        return None\n\n    if self.callback_queue:\n        return self.callback_queue.popleft()\n    return None\n</code></pre>"},{"location":"autoapi/client/ayon_zbrush/api/communication_server.html#client.ayon_zbrush.api.communication_server.QtZbrushRpc","title":"<code>QtZbrushRpc</code>","text":"<p>               Bases: <code>BaseZbrushRpc</code></p> Source code in <code>client/ayon_zbrush/api/communication_server.py</code> <pre><code>class QtZbrushRpc(BaseZbrushRpc):\n    def __init__(self, *args, **kwargs):\n        super().__init__(*args, **kwargs)\n\n        from ayon_core.tools.utils import host_tools\n        self.tools_helper = host_tools.HostToolsHelper()\n\n        route_name = self.route_name\n\n        # Register methods\n        self.add_methods(\n            (route_name, self.workfiles_tool),\n            (route_name, self.loader_tool),\n            (route_name, self.publish_tool),\n            (route_name, self.scene_inventory_tool),\n            (route_name, self.library_loader_tool),\n            (route_name, self.experimental_tools)\n        )\n\n    # Panel routes for tools\n    async def workfiles_tool(self):\n        log.info(\"Triggering Workfile tool\")\n        item = MainThreadItem(self.tools_helper.show_workfiles)\n        self._execute_in_main_thread(item, wait=False)\n        return\n\n    async def loader_tool(self):\n        log.info(\"Triggering Loader tool\")\n        item = MainThreadItem(self.tools_helper.show_loader)\n        self._execute_in_main_thread(item, wait=False)\n        return\n\n    async def publish_tool(self):\n        log.info(\"Triggering Publish tool\")\n        item = MainThreadItem(self.tools_helper.show_publisher_tool)\n        self._execute_in_main_thread(item, wait=False)\n        return\n\n    async def scene_inventory_tool(self):\n        \"\"\"Open Scene Inventory tool.\n\n        Function can't confirm if tool was opened because one part of\n        SceneInventory initialization is calling websocket request to host but\n        host can't response because is waiting for response from this call.\n        \"\"\"\n        log.info(\"Triggering Scene inventory tool\")\n        item = MainThreadItem(self.tools_helper.show_scene_inventory)\n        # Do not wait for result of callback\n        self._execute_in_main_thread(item, wait=False)\n        return\n\n    async def library_loader_tool(self):\n        log.info(\"Triggering Library loader tool\")\n        item = MainThreadItem(self.tools_helper.show_library_loader)\n        self._execute_in_main_thread(item, wait=False)\n        return\n\n    async def experimental_tools(self):\n        log.info(\"Triggering experimental tool\")\n        item = MainThreadItem(self.tools_helper.show_experimental_tools_dialog)\n        self._execute_in_main_thread(item, wait=False)\n        return\n\n    async def _async_execute_in_main_thread(self, item, **kwargs):\n        await self.communication_obj.async_execute_in_main_thread(\n            item, **kwargs\n        )\n\n    def _execute_in_main_thread(self, item, **kwargs):\n        return self.communication_obj.execute_in_main_thread(item, **kwargs)\n</code></pre>"},{"location":"autoapi/client/ayon_zbrush/api/communication_server.html#client.ayon_zbrush.api.communication_server.QtZbrushRpc.scene_inventory_tool","title":"<code>scene_inventory_tool()</code>  <code>async</code>","text":"<p>Open Scene Inventory tool.</p> <p>Function can't confirm if tool was opened because one part of SceneInventory initialization is calling websocket request to host but host can't response because is waiting for response from this call.</p> Source code in <code>client/ayon_zbrush/api/communication_server.py</code> <pre><code>async def scene_inventory_tool(self):\n    \"\"\"Open Scene Inventory tool.\n\n    Function can't confirm if tool was opened because one part of\n    SceneInventory initialization is calling websocket request to host but\n    host can't response because is waiting for response from this call.\n    \"\"\"\n    log.info(\"Triggering Scene inventory tool\")\n    item = MainThreadItem(self.tools_helper.show_scene_inventory)\n    # Do not wait for result of callback\n    self._execute_in_main_thread(item, wait=False)\n    return\n</code></pre>"},{"location":"autoapi/client/ayon_zbrush/api/communication_server.html#client.ayon_zbrush.api.communication_server.WebsocketServerThread","title":"<code>WebsocketServerThread</code>","text":"<p>               Bases: <code>Thread</code></p> <p>Listener for websocket rpc requests.</p> <p>It would be probably better to \"attach\" this to main thread (as for example Harmony needs to run something on main thread), but currently it creates separate thread and separate asyncio event loop</p> Source code in <code>client/ayon_zbrush/api/communication_server.py</code> <pre><code>class WebsocketServerThread(threading.Thread):\n    \"\"\" Listener for websocket rpc requests.\n\n        It would be probably better to \"attach\" this to main thread (as for\n        example Harmony needs to run something on main thread), but currently\n        it creates separate thread and separate asyncio event loop\n    \"\"\"\n    def __init__(self, module, port, loop):\n        super(WebsocketServerThread, self).__init__()\n        self.is_running = False\n        self.server_is_running = False\n        self.port = port\n        self.module = module\n        self.loop = loop\n        self.runner = None\n        self.site = None\n        self.tasks = []\n\n    def run(self):\n        self.is_running = True\n\n        try:\n            log.debug(\"Starting websocket server\")\n\n            self.loop.run_until_complete(self.start_server())\n\n            log.info(\n                \"Running Websocket server on URL:\"\n                \" \\\"ws://localhost:{}\\\"\".format(self.port)\n            )\n\n            asyncio.ensure_future(self.check_shutdown(), loop=self.loop)\n\n            self.server_is_running = True\n            self.loop.run_forever()\n\n        except Exception:\n            log.warning(\n                \"Websocket Server service has failed\", exc_info=True\n            )\n        finally:\n            self.server_is_running = False\n            # optional\n            self.loop.close()\n\n        self.is_running = False\n        log.info(\"Websocket server stopped\")\n\n    async def start_server(self):\n        \"\"\" Starts runner and TCPsite \"\"\"\n        self.runner = web.AppRunner(self.module.app)\n        await self.runner.setup()\n        self.site = web.TCPSite(self.runner, \"localhost\", self.port)\n        await self.site.start()\n\n    def stop(self):\n        \"\"\"Sets is_running flag to false, 'check_shutdown' shuts server down\"\"\"\n        self.is_running = False\n\n    async def check_shutdown(self):\n        \"\"\" Future that is running and checks if server should be running\n            periodically.\n        \"\"\"\n        while self.is_running:\n            while self.tasks:\n                task = self.tasks.pop(0)\n                log.debug(\"waiting for task {}\".format(task))\n                await task\n                log.debug(\"returned value {}\".format(task.result))\n\n            await asyncio.sleep(0.5)\n\n        log.debug(\"## Server shutdown started\")\n\n        await self.site.stop()\n        log.debug(\"# Site stopped\")\n        await self.runner.cleanup()\n        log.debug(\"# Server runner stopped\")\n        tasks = [\n            task for task in asyncio.all_tasks()\n            if task is not asyncio.current_task()\n        ]\n        list(map(lambda task: task.cancel(), tasks))  # cancel all the tasks\n        results = await asyncio.gather(*tasks, return_exceptions=True)\n        log.debug(f\"Finished awaiting cancelled tasks, results: {results}...\")\n        await self.loop.shutdown_asyncgens()\n        # to really make sure everything else has time to stop\n        await asyncio.sleep(0.07)\n        self.loop.stop()\n</code></pre>"},{"location":"autoapi/client/ayon_zbrush/api/communication_server.html#client.ayon_zbrush.api.communication_server.WebsocketServerThread.check_shutdown","title":"<code>check_shutdown()</code>  <code>async</code>","text":"<p>Future that is running and checks if server should be running periodically.</p> Source code in <code>client/ayon_zbrush/api/communication_server.py</code> <pre><code>async def check_shutdown(self):\n    \"\"\" Future that is running and checks if server should be running\n        periodically.\n    \"\"\"\n    while self.is_running:\n        while self.tasks:\n            task = self.tasks.pop(0)\n            log.debug(\"waiting for task {}\".format(task))\n            await task\n            log.debug(\"returned value {}\".format(task.result))\n\n        await asyncio.sleep(0.5)\n\n    log.debug(\"## Server shutdown started\")\n\n    await self.site.stop()\n    log.debug(\"# Site stopped\")\n    await self.runner.cleanup()\n    log.debug(\"# Server runner stopped\")\n    tasks = [\n        task for task in asyncio.all_tasks()\n        if task is not asyncio.current_task()\n    ]\n    list(map(lambda task: task.cancel(), tasks))  # cancel all the tasks\n    results = await asyncio.gather(*tasks, return_exceptions=True)\n    log.debug(f\"Finished awaiting cancelled tasks, results: {results}...\")\n    await self.loop.shutdown_asyncgens()\n    # to really make sure everything else has time to stop\n    await asyncio.sleep(0.07)\n    self.loop.stop()\n</code></pre>"},{"location":"autoapi/client/ayon_zbrush/api/communication_server.html#client.ayon_zbrush.api.communication_server.WebsocketServerThread.start_server","title":"<code>start_server()</code>  <code>async</code>","text":"<p>Starts runner and TCPsite</p> Source code in <code>client/ayon_zbrush/api/communication_server.py</code> <pre><code>async def start_server(self):\n    \"\"\" Starts runner and TCPsite \"\"\"\n    self.runner = web.AppRunner(self.module.app)\n    await self.runner.setup()\n    self.site = web.TCPSite(self.runner, \"localhost\", self.port)\n    await self.site.start()\n</code></pre>"},{"location":"autoapi/client/ayon_zbrush/api/communication_server.html#client.ayon_zbrush.api.communication_server.WebsocketServerThread.stop","title":"<code>stop()</code>","text":"<p>Sets is_running flag to false, 'check_shutdown' shuts server down</p> Source code in <code>client/ayon_zbrush/api/communication_server.py</code> <pre><code>def stop(self):\n    \"\"\"Sets is_running flag to false, 'check_shutdown' shuts server down\"\"\"\n    self.is_running = False\n</code></pre>"},{"location":"autoapi/client/ayon_zbrush/api/communication_server.html#client.ayon_zbrush.api.communication_server.delete_after","title":"<code>delete_after(path)</code>","text":"<p>Delete path after context</p> Source code in <code>client/ayon_zbrush/api/communication_server.py</code> <pre><code>@contextlib.contextmanager\ndef delete_after(path):\n    \"\"\"Delete path after context\"\"\"\n    try:\n        yield\n    finally:\n        os.remove(path)\n</code></pre>"},{"location":"autoapi/client/ayon_zbrush/api/launch_script.html","title":"launch_script","text":""},{"location":"autoapi/client/ayon_zbrush/api/lib.html","title":"lib","text":""},{"location":"autoapi/client/ayon_zbrush/api/lib.html#client.ayon_zbrush.api.lib.execute_zscript","title":"<code>execute_zscript(zscript, communicator=None)</code>","text":"<p>Execute ZScript.</p> <p>Note that this will not wait around for the ZScript to run or for its completion. Nor will errors in the script be detected or raised.</p> Source code in <code>client/ayon_zbrush/api/lib.py</code> <pre><code>def execute_zscript(zscript, communicator=None):\n    \"\"\"Execute ZScript.\n\n    Note that this will *not* wait around for the ZScript to run or for its\n    completion. Nor will errors in the script be detected or raised.\n\n    \"\"\"\n    if not communicator:\n        communicator = CommunicationWrapper.communicator\n    print(f\"Executing ZScript: {zscript}\")\n    return communicator.execute_zscript(zscript)\n</code></pre>"},{"location":"autoapi/client/ayon_zbrush/api/lib.html#client.ayon_zbrush.api.lib.execute_zscript_and_wait","title":"<code>execute_zscript_and_wait(zscript, check_filepath=None, wait=0.1, ping_wait=2.0, timeout=10.0)</code>","text":"<p>Execute ZScript and wait until ZScript finished processing.</p> <p>This actually waits until a particular file exists on disk. If your ZScript is solely intended to write out to a file to return a variable value from ZBrush then you can set <code>check_filepath</code> to that file you'll be writing to. As soon as that file is found this function will assume the script has finished. If no <code>check_filepath</code> is provided a few extra lines of ZScript will be appended to your</p> <p>Raises:</p> Type Description <code>RuntimeError</code> <p>When timeout is reached.</p> <p>Parameters:</p> Name Type Description Default <code>zscript</code> <code>str</code> <p>The ZScript to run.</p> required <code>check_filepath</code> <code>str</code> <p>Wait until this filepath exists, otherwise wait until the timeout is reached if never found.</p> <code>None</code> <code>wait</code> <code>float</code> <p>The amount of seconds to wait in-between each file existence check.</p> <code>0.1</code> <code>ping_wait</code> <code>float</code> <p>The amount of seconds between sending a new 'ping' whether Zbrush is responding already - usually to detect whether a zscript had finished processing.</p> <code>2.0</code> <code>timeout</code> <code>float</code> <p>The amount of seconds after which the script will be assumed to have failed and raise an error.</p> <code>10.0</code> Source code in <code>client/ayon_zbrush/api/lib.py</code> <pre><code>def execute_zscript_and_wait(zscript,\n                             check_filepath=None,\n                             wait: float = 0.1,\n                             ping_wait: float = 2.0,\n                             timeout: float = 10.0):\n    \"\"\"Execute ZScript and wait until ZScript finished processing.\n\n    This actually waits until a particular file exists on disk. If your ZScript\n    is solely intended to write out to a file to return a variable value from\n    ZBrush then you can set `check_filepath` to that file you'll be writing to.\n    As soon as that file is found this function will assume the script has\n    finished. If no `check_filepath` is provided a few extra lines of ZScript\n    will be appended to your\n\n    Raises:\n        RuntimeError: When timeout is reached.\n\n    Args:\n        zscript (str): The ZScript to run.\n        check_filepath (str): Wait until this filepath exists, otherwise\n            wait until the timeout is reached if never found.\n        wait (float): The amount of seconds to wait in-between each file\n            existence check.\n        ping_wait (float): The amount of seconds between sending a new 'ping'\n            whether Zbrush is responding already - usually to detect whether\n            a zscript had finished processing.\n        timeout (float): The amount of seconds after which the script will be\n            assumed to have failed and raise an error.\n\n    \"\"\"\n    if check_filepath is None:\n        var_name = str(uuid.uuid4())\n        success_check_file = get_tempfile_path().replace(\"\\\\\", \"/\")\n        zscript += f\"\"\"\n[MemCreate, \"AYON_{var_name}\", 1, 0]\n[MemWriteString, \"AYON_{var_name}\", \"1\", 0]\n[MemSaveToFile, \"AYON_{var_name}\", \"{success_check_file}\", 1]\n[MemDelete,  \"AYON_{var_name}\"]\n        \"\"\"\n    else:\n        success_check_file = check_filepath\n\n    def wait_until(filepath):\n        if filepath and os.path.exists(filepath):\n            return True\n\n    fn = functools.partial(wait_until, check_filepath)\n\n    execute_zscript(zscript)\n    wait_zscript(until=fn,\n                 wait=wait,\n                 ping_wait=ping_wait,\n                 timeout=timeout)\n\n    if not os.path.exists(success_check_file):\n        raise RuntimeError(\n            f\"Success file does not exist: {success_check_file}\"\n        )\n</code></pre>"},{"location":"autoapi/client/ayon_zbrush/api/lib.html#client.ayon_zbrush.api.lib.export_tool","title":"<code>export_tool(filepath, subdivision_level=0)</code>","text":"<p>Export active zbrush tool to filepath.</p> <p>Parameters:</p> Name Type Description Default <code>filepath</code> <code>str</code> <p>The filepath to export to.</p> required <code>subdivision_level</code> <code>int</code> <p>The subdivision level to export. A value of zero will export the current subdivision level A negative value, e.g. -1 will go negatively from the highest subdivs - e.g. -1 is the highest available subdiv.</p> <code>0</code> Source code in <code>client/ayon_zbrush/api/lib.py</code> <pre><code>def export_tool(filepath: str, subdivision_level: int = 0):\n    \"\"\"Export active zbrush tool to filepath.\n\n    Args:\n        filepath (str): The filepath to export to.\n        subdivision_level (int): The subdivision level to export.\n            A value of zero will export the current subdivision level\n            A negative value, e.g. -1 will go negatively from the highest\n            subdivs - e.g. -1 is the highest available subdiv.\n\n    \"\"\"\n    # TODO: If this overrides a tool's subdiv level it should actually revert\n    #   it to the original level so that subsequent publishes behave the same\n    filepath = filepath.replace(\"\\\\\", \"/\")\n    # Only set any subdiv level if subdiv level != 0\n    set_subdivs_script = \"\"\n    if subdivision_level != 0:\n        set_subdivs_script = f\"\"\"\n[VarSet, maxsubd, [IGetMax, \"Tool:Geometry:SDiv\"]]\n[If, #maxsubd &gt; 0,\n    [ISet, \"Tool:Geometry:SDiv\", {subdivision_level}, 0],\n    [ISet, \"Tool:Geometry:SDiv\", #maxsubd - {subdivision_level}, 0]\n]\"\"\"\n\n    # Export tool\n    export_tool_zscript = f\"\"\"\n[IFreeze, {set_subdivs_script}\n[ISet, Preferences:ImportExport:Grp, 0]\n[FileNameSetNext, \"{filepath}\"]\n[IKeyPress, 13, [IPress, Tool:Export]]\n]\"\"\"\n\n    # We do not check for the export file's existence because Zbrush might\n    # write the file in chunks, as such the file might exist before the writing\n    # to it has finished\n    execute_zscript_and_wait(export_tool_zscript)\n    if not os.path.exists(filepath):\n        raise RuntimeError(f\"Export failed. File does not exist: {filepath}\")\n</code></pre>"},{"location":"autoapi/client/ayon_zbrush/api/lib.html#client.ayon_zbrush.api.lib.get_tempfile_path","title":"<code>get_tempfile_path()</code>","text":"<p>Return a path valid to write a tempfile to that does not exist yet.</p> <p>This can be, for example, used as temporary path to allow a ZScript to to store variable values into as a return value to Python.</p> Source code in <code>client/ayon_zbrush/api/lib.py</code> <pre><code>def get_tempfile_path() -&gt; str:\n    \"\"\"Return a path valid to write a tempfile to that does not exist yet.\n\n    This can be, for example, used as temporary path to allow a ZScript to\n    to store variable values into as a return value to Python.\n    \"\"\"\n    identifier = uuid.uuid4()\n    temp_path = os.path.join(\n        tempfile.gettempdir(),\n        f\"{tempfile.gettempprefix()}_{identifier}.txt\"\n    )\n    assert not os.path.exists(temp_path)\n    return temp_path\n</code></pre>"},{"location":"autoapi/client/ayon_zbrush/api/lib.html#client.ayon_zbrush.api.lib.get_workdir","title":"<code>get_workdir()</code>","text":"<p>Return the currently active work directory</p> Source code in <code>client/ayon_zbrush/api/lib.py</code> <pre><code>def get_workdir() -&gt; str:\n    \"\"\"Return the currently active work directory\"\"\"\n    return os.environ[\"AYON_WORKDIR\"]\n</code></pre>"},{"location":"autoapi/client/ayon_zbrush/api/lib.html#client.ayon_zbrush.api.lib.is_in_edit_mode","title":"<code>is_in_edit_mode()</code>","text":"<p>Return whether transform edit mode is currently enabled.</p> <p>Certain actions can't be performed if Zbrush is currently not within edit mode, like exporting a model.</p> <p>Returns:</p> Name Type Description <code>bool</code> <code>bool</code> <p>Whether Edit Mode is enabled.</p> Source code in <code>client/ayon_zbrush/api/lib.py</code> <pre><code>def is_in_edit_mode() -&gt; bool:\n    \"\"\"Return whether transform edit mode is currently enabled.\n\n    Certain actions can't be performed if Zbrush is currently not within\n    edit mode, like exporting a model.\n\n    Returns:\n        bool: Whether Edit Mode is enabled.\n    \"\"\"\n    temp_path = get_tempfile_path()\n    temp_path = temp_path.replace(\"\\\\\", \"/\")\n\n    # Write Transform:Edit state to temp file\n    in_edit_mode = (\"\"\"\n[IFreeze,\n[MemCreate, EditMode, 20, 0]\n[MemWriteString, EditMode, [IGet, Transform:Edit], 0]\n[MemSaveToFile, EditMode, \"{temp_file}\", 1]\n[MemDelete, EditMode]\n]\n\"\"\").format(temp_file=temp_path)\n    execute_zscript_and_wait(in_edit_mode, temp_path, timeout=3)\n    with open(temp_path, \"r\") as mode:\n        content = str(mode.read())\n        bool_mode = content.rstrip('\\x00')\n\n    return bool(int(bool_mode))\n</code></pre>"},{"location":"autoapi/client/ayon_zbrush/api/lib.html#client.ayon_zbrush.api.lib.wait_zscript","title":"<code>wait_zscript(until=None, wait=0.1, ping_wait=2.0, timeout=15.0)</code>","text":"<p>Wait until the condition is met or until zbrush responds again.</p> <p>This periodically 'pings' zbrush by submitting a zscript for execution that will write a temporary ping file. As soon as that file exists it is assumed that Zbrush has responded.</p> <p>If the <code>until</code> callable is passed, then during the wait this function will periodically be called, and when True it's will assume success and stop waiting.</p> <p>Parameters:</p> Name Type Description Default <code>until</code> <code>callable</code> <p>If a callable is provided, whenever it returns True the wait is cancelled and assumed to have finished.</p> <code>None</code> <code>wait</code> <code>float</code> <p>The amount of seconds to wait in-between each file existence check.</p> <code>0.1</code> <code>ping_wait</code> <code>float</code> <p>The amount of seconds between sending a new 'ping' whether Zbrush is responding already - usually to detect whether a zscript had finished processing.</p> <code>2.0</code> <code>timeout</code> <code>float</code> <p>The amount of seconds after which the script will be assumed to have failed and raise an error.</p> <code>15.0</code> <p>Returns:</p> Name Type Description <code>int</code> <code>int</code> <p>-1 if callable <code>until</code> returned True. Otherwise returns the amount  of pings that were sent before Zbrush responded.</p> Source code in <code>client/ayon_zbrush/api/lib.py</code> <pre><code>def wait_zscript(until=None,\n                 wait: float = 0.1,\n                 ping_wait: float = 2.0,\n                 timeout: float = 15.0) -&gt; int:\n    \"\"\"Wait until the condition is met or until zbrush responds again.\n\n    This periodically 'pings' zbrush by submitting a zscript for execution\n    that will write a temporary ping file. As soon as that file exists it is\n    assumed that Zbrush has responded.\n\n    If the `until` callable is passed, then during the wait this function will\n    periodically be called, and when True it's will assume success and stop\n    waiting.\n\n    Args:\n        until (callable): If a callable is provided, whenever it returns\n            True the wait is cancelled and assumed to have finished.\n        wait (float): The amount of seconds to wait in-between each file\n            existence check.\n        ping_wait (float): The amount of seconds between sending a new 'ping'\n            whether Zbrush is responding already - usually to detect whether\n            a zscript had finished processing.\n        timeout (float): The amount of seconds after which the script will be\n            assumed to have failed and raise an error.\n\n    Returns:\n        int: -1 if callable `until` returned True. Otherwise returns the amount\n             of pings that were sent before Zbrush responded.\n\n    \"\"\"\n    # It may occur that a zscript execution gets interrupted and thus a 'ping'\n    # gets lost. To avoid just long waits until the timeout in case previous\n    # pings got lost we periodically execute a new check ping zscript to see\n    # if that finishes rapidly\n\n    ping_filepath = get_tempfile_path().replace(\"\\\\\", \"/\")\n    var_name = str(uuid.uuid4()).replace(\"-\", \"_\")\n    create_ping_file_zscript = f\"\"\"\n[MemCreate, \"AYON_{var_name}\", 1, 0]\n[MemWriteString, \"AYON_{var_name}\", \"1\", 0]\n[MemSaveToFile, \"AYON_{var_name}\", \"{ping_filepath}\", 1]\n[MemDelete,  \"AYON_{var_name}\"]\n    \"\"\"\n    start_time = time.time()\n    timeout_time = start_time + timeout\n    last_ping_time = None\n    num_pings_sent = 0\n    while True:\n        if until is not None and until():\n            # We have reached the `until` condition\n            print(\"Condition met..\")\n            return -1\n\n        t = time.time()\n        if last_ping_time is None or t - last_ping_time &gt; ping_wait:\n            last_ping_time = t\n            num_pings_sent += 1\n            execute_zscript(create_ping_file_zscript)\n\n        # Check the periodic pings we have sent - check only the last pings\n        # up to the max amount.\n        if os.path.exists(ping_filepath):\n            print(f\"Sent {num_pings_sent} pings. \"\n                  f\"Received answer after {t-start_time} seconds.\")\n            if os.path.isfile(ping_filepath):\n                os.remove(ping_filepath)\n\n            return num_pings_sent\n\n        if t &gt; timeout_time:\n            raise RuntimeError(\n                \"Timeout. Zscript took longer than \"\n                f\"{timeout}s to run.\"\n            )\n\n        time.sleep(wait)\n</code></pre>"},{"location":"autoapi/client/ayon_zbrush/api/pipeline.html","title":"pipeline","text":"<p>Pipeline tools for AYON Zbrush integration.</p>"},{"location":"autoapi/client/ayon_zbrush/api/pipeline.html#client.ayon_zbrush.api.pipeline.ZbrushHost","title":"<code>ZbrushHost</code>","text":"<p>               Bases: <code>HostBase</code>, <code>IWorkfileHost</code>, <code>ILoadHost</code>, <code>IPublishHost</code></p> Source code in <code>client/ayon_zbrush/api/pipeline.py</code> <pre><code>class ZbrushHost(HostBase, IWorkfileHost, ILoadHost, IPublishHost):\n    name = \"zbrush\"\n\n    def install(self):\n        # Create workdir folder if does not exist yet\n        workdir = os.getenv(\"AYON_WORKDIR\")\n        if not os.path.exists(workdir):\n            os.makedirs(workdir)\n\n        plugins_dir = os.path.join(ZBRUSH_HOST_DIR, \"plugins\")\n        publish_dir = os.path.join(plugins_dir, \"publish\")\n        load_dir = os.path.join(plugins_dir, \"load\")\n        create_dir = os.path.join(plugins_dir, \"create\")\n\n        pyblish.api.register_host(\"zbrush\")\n        pyblish.api.register_plugin_path(publish_dir)\n        register_loader_plugin_path(load_dir)\n        register_creator_plugin_path(create_dir)\n\n        register_event_callback(\"application.launched\", self.initial_app_launch)\n        register_event_callback(\"application.exit\", self.application_exit)\n\n    def get_current_project_name(self):\n        \"\"\"\n        Returns:\n            Union[str, None]: Current project name.\n        \"\"\"\n\n        return self.get_current_context().get(\"project_name\")\n\n    def get_current_folder_path(self):\n        \"\"\"\n        Returns:\n            Union[str, None]: Current folder path.\n        \"\"\"\n\n        return self.get_current_context().get(\"folder_path\")\n\n    def get_current_task_name(self):\n        \"\"\"\n        Returns:\n            Union[str, None]: Current task name.\n        \"\"\"\n\n        return self.get_current_context().get(\"task_name\")\n\n    def get_current_context(self):\n        context = get_current_workfile_context()\n        if not context:\n            return get_global_context()\n        if \"project_name\" in context:\n            return context\n        # This is legacy way how context was stored\n        return {\n            \"project_name\": context.get(\"project_name\"),\n            \"folder_path\": context.get(\"folder_path\"),\n            \"task_name\": context.get(\"task_name\")\n        }\n\n    # --- Workfile ---\n    def open_workfile(self, filepath):\n        filepath = filepath.replace(\"\\\\\", \"/\")\n        execute_zscript(f\"\"\"\n[IFreeze,\n    [FileNameSetNext, \"{filepath}\"]\n    [IKeyPress, 13, [IPress, File:Open:Open]]]\n]\n    \"\"\")\n        set_current_file(filepath=filepath)\n        return filepath\n\n    def save_workfile(self, filepath=None):\n        if not filepath:\n            filepath = self.get_current_workfile()\n        filepath = filepath.replace(\"\\\\\", \"/\")\n        # # move the json data to the files\n        # # shutil.copy\n        copy_ayon_data(filepath)\n        set_current_file(filepath=filepath)\n        execute_zscript(f\"\"\"\n[IFreeze,\n    [FileNameSetNext, \"{filepath}\"]\n    [IKeyPress, 13, [IPress, File:SaveAs:SaveAs]]]\n]\n\"\"\")\n        return filepath\n\n    def get_current_workfile(self):\n        work_dir = get_workdir()\n        txt_dir = os.path.join(\n            work_dir, \".zbrush_metadata\").replace(\n                \"\\\\\", \"/\"\n        )\n        with open (f\"{txt_dir}/current_file.txt\", \"r\") as current_file:\n            content = str(current_file.read())\n            filepath = content.rstrip('\\x00')\n            current_file.close()\n            return filepath\n\n    def workfile_has_unsaved_changes(self):\n        # Pop-up dialog would be located to ask if users\n        # save scene if it has unsaved changes\n        return True\n\n    def get_workfile_extensions(self):\n        return [\".zpr\"]\n\n    def list_instances(self):\n        \"\"\"Get all AYON instances.\"\"\"\n        # Figure out how to deal with this\n        return get_instance_workfile_metadata()\n\n    def write_instances(self, data):\n        \"\"\"Write all AYON instances\"\"\"\n        return write_workfile_metadata(ZBRUSH_SECTION_NAME_INSTANCES, data)\n\n    def get_containers(self):\n        \"\"\"Get the data of the containers\n\n        Returns:\n            list: the list which stores the data of the containers\n        \"\"\"\n        return get_containers()\n\n    def initial_app_launch(self):\n        \"\"\"Triggers on launch of the communication server for Zbrush.\n\n        Usually this aligns roughly with the start of Zbrush.\n        \"\"\"\n        #TODO: figure out how to deal with the last workfile issue\n        set_current_file()\n        context = get_global_context()\n        save_current_workfile_context(context)\n\n    def application_exit(self):\n        \"\"\"Logic related to TimerManager.\n\n        Todo:\n            This should be handled out of Zbrush integration logic.\n        \"\"\"\n        remove_tmp_data()\n        data = get_current_project_settings()\n        stop_timer = data[\"zbrush\"][\"stop_timer_on_application_exit\"]\n\n        if not stop_timer:\n            return\n\n        # Stop application timer.\n        webserver_url = os.environ.get(\"AYON_WEBSERVER_URL\")\n        rest_api_url = \"{}/timers_manager/stop_timer\".format(webserver_url)\n        requests.post(rest_api_url)\n\n    def update_context_data(self, data, changes):\n        return write_workfile_metadata(ZBRUSH_METADATA_CREATE_CONTEXT, data)\n\n    def get_context_data(self):\n        get_load_workfile_metadata(ZBRUSH_METADATA_CREATE_CONTEXT)\n</code></pre>"},{"location":"autoapi/client/ayon_zbrush/api/pipeline.html#client.ayon_zbrush.api.pipeline.ZbrushHost.application_exit","title":"<code>application_exit()</code>","text":"<p>Logic related to TimerManager.</p> Todo <p>This should be handled out of Zbrush integration logic.</p> Source code in <code>client/ayon_zbrush/api/pipeline.py</code> <pre><code>def application_exit(self):\n    \"\"\"Logic related to TimerManager.\n\n    Todo:\n        This should be handled out of Zbrush integration logic.\n    \"\"\"\n    remove_tmp_data()\n    data = get_current_project_settings()\n    stop_timer = data[\"zbrush\"][\"stop_timer_on_application_exit\"]\n\n    if not stop_timer:\n        return\n\n    # Stop application timer.\n    webserver_url = os.environ.get(\"AYON_WEBSERVER_URL\")\n    rest_api_url = \"{}/timers_manager/stop_timer\".format(webserver_url)\n    requests.post(rest_api_url)\n</code></pre>"},{"location":"autoapi/client/ayon_zbrush/api/pipeline.html#client.ayon_zbrush.api.pipeline.ZbrushHost.get_containers","title":"<code>get_containers()</code>","text":"<p>Get the data of the containers</p> <p>Returns:</p> Name Type Description <code>list</code> <p>the list which stores the data of the containers</p> Source code in <code>client/ayon_zbrush/api/pipeline.py</code> <pre><code>def get_containers(self):\n    \"\"\"Get the data of the containers\n\n    Returns:\n        list: the list which stores the data of the containers\n    \"\"\"\n    return get_containers()\n</code></pre>"},{"location":"autoapi/client/ayon_zbrush/api/pipeline.html#client.ayon_zbrush.api.pipeline.ZbrushHost.get_current_folder_path","title":"<code>get_current_folder_path()</code>","text":"<p>Returns:</p> Type Description <p>Union[str, None]: Current folder path.</p> Source code in <code>client/ayon_zbrush/api/pipeline.py</code> <pre><code>def get_current_folder_path(self):\n    \"\"\"\n    Returns:\n        Union[str, None]: Current folder path.\n    \"\"\"\n\n    return self.get_current_context().get(\"folder_path\")\n</code></pre>"},{"location":"autoapi/client/ayon_zbrush/api/pipeline.html#client.ayon_zbrush.api.pipeline.ZbrushHost.get_current_project_name","title":"<code>get_current_project_name()</code>","text":"<p>Returns:</p> Type Description <p>Union[str, None]: Current project name.</p> Source code in <code>client/ayon_zbrush/api/pipeline.py</code> <pre><code>def get_current_project_name(self):\n    \"\"\"\n    Returns:\n        Union[str, None]: Current project name.\n    \"\"\"\n\n    return self.get_current_context().get(\"project_name\")\n</code></pre>"},{"location":"autoapi/client/ayon_zbrush/api/pipeline.html#client.ayon_zbrush.api.pipeline.ZbrushHost.get_current_task_name","title":"<code>get_current_task_name()</code>","text":"<p>Returns:</p> Type Description <p>Union[str, None]: Current task name.</p> Source code in <code>client/ayon_zbrush/api/pipeline.py</code> <pre><code>def get_current_task_name(self):\n    \"\"\"\n    Returns:\n        Union[str, None]: Current task name.\n    \"\"\"\n\n    return self.get_current_context().get(\"task_name\")\n</code></pre>"},{"location":"autoapi/client/ayon_zbrush/api/pipeline.html#client.ayon_zbrush.api.pipeline.ZbrushHost.initial_app_launch","title":"<code>initial_app_launch()</code>","text":"<p>Triggers on launch of the communication server for Zbrush.</p> <p>Usually this aligns roughly with the start of Zbrush.</p> Source code in <code>client/ayon_zbrush/api/pipeline.py</code> <pre><code>def initial_app_launch(self):\n    \"\"\"Triggers on launch of the communication server for Zbrush.\n\n    Usually this aligns roughly with the start of Zbrush.\n    \"\"\"\n    #TODO: figure out how to deal with the last workfile issue\n    set_current_file()\n    context = get_global_context()\n    save_current_workfile_context(context)\n</code></pre>"},{"location":"autoapi/client/ayon_zbrush/api/pipeline.html#client.ayon_zbrush.api.pipeline.ZbrushHost.list_instances","title":"<code>list_instances()</code>","text":"<p>Get all AYON instances.</p> Source code in <code>client/ayon_zbrush/api/pipeline.py</code> <pre><code>def list_instances(self):\n    \"\"\"Get all AYON instances.\"\"\"\n    # Figure out how to deal with this\n    return get_instance_workfile_metadata()\n</code></pre>"},{"location":"autoapi/client/ayon_zbrush/api/pipeline.html#client.ayon_zbrush.api.pipeline.ZbrushHost.write_instances","title":"<code>write_instances(data)</code>","text":"<p>Write all AYON instances</p> Source code in <code>client/ayon_zbrush/api/pipeline.py</code> <pre><code>def write_instances(self, data):\n    \"\"\"Write all AYON instances\"\"\"\n    return write_workfile_metadata(ZBRUSH_SECTION_NAME_INSTANCES, data)\n</code></pre>"},{"location":"autoapi/client/ayon_zbrush/api/pipeline.html#client.ayon_zbrush.api.pipeline.copy_ayon_data","title":"<code>copy_ayon_data(filepath)</code>","text":"<p>Copy any ayon-related data(     such as instances, create-context, cotnainers)     from the previous workfile to the new one     when incrementing and saving workfile.</p> <p>Parameters:</p> Name Type Description Default <code>filepath</code> <code>str</code> <p>the workfile path to be saved</p> required Source code in <code>client/ayon_zbrush/api/pipeline.py</code> <pre><code>def copy_ayon_data(filepath):\n    \"\"\"Copy any ayon-related data(\n        such as instances, create-context, cotnainers)\n        from the previous workfile to the new one\n        when incrementing and saving workfile.\n\n    Args:\n        filepath (str): the workfile path to be saved\n    \"\"\"\n    filename = os.path.splitext(os.path.basename(filepath))[0].strip()\n    current_file = registered_host().get_current_workfile()\n    if current_file:\n        current_file = os.path.splitext(\n            os.path.basename(current_file))[0].strip()\n    work_dir = get_workdir()\n    for name in [ZBRUSH_METADATA_CREATE_CONTEXT,\n                 ZBRUSH_SECTION_NAME_INSTANCES,\n                 ZBRUSH_SECTION_NAME_CONTAINERS]:\n        src_json_dir = os.path.join(\n            work_dir, \".zbrush_metadata\", current_file, name).replace(\n                \"\\\\\", \"/\"\n            )\n        if not os.path.exists(src_json_dir):\n            continue\n        dst_json_dir = os.path.join(\n            work_dir, \".zbrush_metadata\", filename, name).replace(\n                \"\\\\\", \"/\"\n            )\n        os.makedirs(dst_json_dir, exist_ok=True)\n        all_fname_list = [jfile for jfile in os.listdir(src_json_dir)\n                        if jfile.endswith(\"json\")]\n        if all_fname_list:\n            for fname in all_fname_list:\n                src_json = f\"{src_json_dir}/{fname}\"\n                dst_json = f\"{dst_json_dir}/{fname}\"\n                shutil.copy(src_json, dst_json)\n</code></pre>"},{"location":"autoapi/client/ayon_zbrush/api/pipeline.html#client.ayon_zbrush.api.pipeline.get_containers","title":"<code>get_containers()</code>","text":"<p>Function to get the container data</p> <p>Returns:</p> Name Type Description <code>list</code> <p>list of container data</p> Source code in <code>client/ayon_zbrush/api/pipeline.py</code> <pre><code>def get_containers():\n    \"\"\"Function to get the container data\n\n    Returns:\n        list: list of container data\n    \"\"\"\n    output = get_load_workfile_metadata(ZBRUSH_SECTION_NAME_CONTAINERS)\n    if output:\n        for item in output:\n            if \"objectName\" not in item and \"name\" in item:\n                members = item[\"name\"]\n                if isinstance(members, list):\n                    members = \"|\".join([str(member) for member in members])\n                item[\"objectName\"] = members\n\n    return output\n</code></pre>"},{"location":"autoapi/client/ayon_zbrush/api/pipeline.html#client.ayon_zbrush.api.pipeline.get_current_workfile_context","title":"<code>get_current_workfile_context()</code>","text":"<p>Function to get the current context data from the related json file in .zbrush_metadata/context folder</p> <p>The current context data includes thing like project name, folder path and task name.</p> <p>Returns:</p> Name Type Description <code>list</code> <p>list of context data</p> Source code in <code>client/ayon_zbrush/api/pipeline.py</code> <pre><code>def get_current_workfile_context():\n    \"\"\"Function to get the current context data from the related\n    json file in .zbrush_metadata/context folder\n\n    The current context data includes thing like project name,\n    folder path and task name.\n\n    Returns:\n        list: list of context data\n    \"\"\"\n    return get_load_context_metadata()\n</code></pre>"},{"location":"autoapi/client/ayon_zbrush/api/pipeline.html#client.ayon_zbrush.api.pipeline.get_instance_workfile_metadata","title":"<code>get_instance_workfile_metadata()</code>","text":"<p>Get instance data from the related metadata json(\"instances.json\") which stores in .zbrush_metadata/{workfile}/instances folder in the project work directory.</p> <p>Instance data includes the info like the workfile instance and any instances created by the users for publishing.</p> <p>Returns:</p> Name Type Description <code>dict</code> <p>instance data</p> Source code in <code>client/ayon_zbrush/api/pipeline.py</code> <pre><code>def get_instance_workfile_metadata():\n    \"\"\"Get instance data from the related metadata json(\"instances.json\")\n    which stores in .zbrush_metadata/{workfile}/instances folder\n    in the project work directory.\n\n    Instance data includes the info like the workfile instance\n    and any instances created by the users for publishing.\n\n    Returns:\n        dict: instance data\n    \"\"\"\n    file_content = []\n    current_file = registered_host().get_current_workfile()\n    if current_file:\n        current_file = os.path.splitext(\n            os.path.basename(current_file))[0].strip()\n    work_dir = get_workdir()\n    json_dir = os.path.join(\n        work_dir, \".zbrush_metadata\",\n        current_file, ZBRUSH_SECTION_NAME_INSTANCES).replace(\n            \"\\\\\", \"/\"\n        )\n    if not os.path.exists(json_dir) or not os.listdir(json_dir):\n        return file_content\n    for file in os.listdir(json_dir):\n        with open (f\"{json_dir}/{file}\", \"r\") as data:\n            file_content = json.load(data)\n\n    return file_content\n</code></pre>"},{"location":"autoapi/client/ayon_zbrush/api/pipeline.html#client.ayon_zbrush.api.pipeline.get_load_context_metadata","title":"<code>get_load_context_metadata()</code>","text":"<p>Get the context data from the related json file (\"context.json\") which stores in .zbrush_metadata/context folder in the project work directory.</p> <p>The context data includes the project name, folder path and task name.</p> <p>Returns:</p> Name Type Description <code>list</code> <p>context data</p> Source code in <code>client/ayon_zbrush/api/pipeline.py</code> <pre><code>def get_load_context_metadata():\n    \"\"\"Get the context data from the related json file\n    (\"context.json\") which stores in .zbrush_metadata/context\n    folder in the project work directory.\n\n    The context data includes the project name, folder path and\n    task name.\n\n    Returns:\n        list: context data\n    \"\"\"\n    file_content = {}\n    work_dir = get_workdir()\n    json_dir = os.path.join(\n        work_dir, \".zbrush_metadata\", ZBRUSH_SECTION_NAME_CONTEXT).replace(\n            \"\\\\\", \"/\"\n        )\n    if not os.path.exists(json_dir):\n        return file_content\n    file_list = os.listdir(json_dir)\n    if not file_list:\n        return file_content\n    for file in file_list:\n        with open (f\"{json_dir}/{file}\", \"r\") as data:\n            content = ast.literal_eval(str(data.read().strip()))\n            file_content.update(content)\n            data.close()\n    return file_content\n</code></pre>"},{"location":"autoapi/client/ayon_zbrush/api/pipeline.html#client.ayon_zbrush.api.pipeline.get_load_workfile_metadata","title":"<code>get_load_workfile_metadata(metadata_key)</code>","text":"<p>Get to load the workfile json metadata(such as creator's context data and container data) which stores in zbrush_metadata/{workfile}/{metadata_key} folder in the project work directory. It mainly supports to the metadata_key below: ZBRUSH_METADATA_CREATE_CONTEXT: loading create_context.json where     stores the data with publish_attributes(e.g. whether the     optional validator is enabled.) ZBRUSH_SECTION_NAME_CONTAINERS: loading {subset_name}.json where     includes all the loaded asset data to the zbrush scene.</p> <p>Parameters:</p> Name Type Description Default <code>metadata_key</code> <code>str</code> <p>name of the metadata key</p> required <p>Returns:</p> Name Type Description <code>list</code> <p>list of metadata(create-context data or container data)</p> Source code in <code>client/ayon_zbrush/api/pipeline.py</code> <pre><code>def get_load_workfile_metadata(metadata_key):\n    \"\"\"Get to load the workfile json metadata(such as\n    creator's context data and container data) which stores in\n    zbrush_metadata/{workfile}/{metadata_key} folder in the project\n    work directory.\n    It mainly supports to the metadata_key below:\n    ZBRUSH_METADATA_CREATE_CONTEXT: loading create_context.json where\n        stores the data with publish_attributes(e.g. whether the\n        optional validator is enabled.)\n    ZBRUSH_SECTION_NAME_CONTAINERS: loading {subset_name}.json where\n        includes all the loaded asset data to the zbrush scene.\n\n    Args:\n        metadata_key (str): name of the metadata key\n\n    Returns:\n        list: list of metadata(create-context data or container data)\n    \"\"\"\n    file_content = []\n    current_file = registered_host().get_current_workfile()\n    if current_file:\n        current_file = os.path.splitext(\n            os.path.basename(current_file))[0].strip()\n    work_dir = get_workdir()\n    json_dir = os.path.join(\n        work_dir, \".zbrush_metadata\",\n        current_file, metadata_key).replace(\n            \"\\\\\", \"/\"\n        )\n    if not os.path.exists(json_dir):\n        return file_content\n    file_list = os.listdir(json_dir)\n    if not file_list:\n        return file_content\n    for file in file_list:\n        with open (f\"{json_dir}/{file}\", \"r\") as data:\n            content = json.load(data)\n            file_content.extend(content)\n            data.close()\n    return file_content\n</code></pre>"},{"location":"autoapi/client/ayon_zbrush/api/pipeline.html#client.ayon_zbrush.api.pipeline.imprint","title":"<code>imprint(container, representation_id)</code>","text":"<p>Function to update the container data from the related json file in .zbrushmetadata/{workfile}/container when updating or switching asset(s)</p> <p>Parameters:</p> Name Type Description Default <code>container</code> <code>str</code> <p>container</p> required <code>representation_id</code> <code>str</code> <p>representation id</p> required Source code in <code>client/ayon_zbrush/api/pipeline.py</code> <pre><code>def imprint(container, representation_id):\n    \"\"\"Function to update the container data from\n    the related json file in .zbrushmetadata/{workfile}/container\n    when updating or switching asset(s)\n\n    Args:\n        container (str): container\n        representation_id (str): representation id\n    \"\"\"\n    old_container_data = []\n    data = {}\n    name = container[\"objectName\"]\n    current_file = registered_host().get_current_workfile()\n    if current_file:\n        current_file = os.path.splitext(\n            os.path.basename(current_file))[0].strip()\n    work_dir = get_workdir()\n    json_dir = os.path.join(\n        work_dir, \".zbrush_metadata\",\n        current_file, ZBRUSH_SECTION_NAME_CONTAINERS).replace(\n            \"\\\\\", \"/\"\n        )\n    js_fname = next((jfile for jfile in os.listdir(json_dir)\n                     if jfile.endswith(f\"{name}.json\")), None)\n    if js_fname:\n        with open(f\"{json_dir}/{js_fname}\", \"r\") as file:\n            old_container_data = json.load(file)\n            print(f\"data: {type(old_container_data)}\")\n            file.close()\n\n        open(f\"{json_dir}/{js_fname}\", 'w').close()\n        for item in old_container_data:\n            item[\"representation\"] = representation_id\n            data.update(item)\n        with open(f\"{json_dir}/{js_fname}\", \"w\") as file:\n            new_container_data = json.dumps([data])\n            file.write(new_container_data)\n            file.close()\n</code></pre>"},{"location":"autoapi/client/ayon_zbrush/api/pipeline.html#client.ayon_zbrush.api.pipeline.remove_container_data","title":"<code>remove_container_data(name)</code>","text":"<p>Function to remove the specific container data from {subset_name}.json in .zbrush_metadata/{workfile}/containers folder</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>str</code> <p>object name stored in the container</p> required Source code in <code>client/ayon_zbrush/api/pipeline.py</code> <pre><code>def remove_container_data(name):\n    \"\"\"Function to remove the specific container data from\n    {subset_name}.json in .zbrush_metadata/{workfile}/containers folder\n\n    Args:\n        name (str): object name stored in the container\n    \"\"\"\n    current_file = registered_host().get_current_workfile()\n    if current_file:\n        current_file = os.path.splitext(\n            os.path.basename(current_file))[0].strip()\n    work_dir = get_workdir()\n    json_dir = os.path.join(\n        work_dir, \".zbrush_metadata\",\n        current_file, ZBRUSH_SECTION_NAME_CONTAINERS).replace(\n            \"\\\\\", \"/\"\n        )\n    all_fname_list = os.listdir(json_dir)\n    json_file = next((jfile for jfile in all_fname_list\n                               if jfile == f\"{name}.json\"), None)\n    if json_file:\n        os.remove(f\"{json_dir}/{json_file}\")\n</code></pre>"},{"location":"autoapi/client/ayon_zbrush/api/pipeline.html#client.ayon_zbrush.api.pipeline.remove_tmp_data","title":"<code>remove_tmp_data()</code>","text":"<p>Remove all temporary data which is created by AYON without saving changes when launching Zbrush without enabling <code>skip opening last workfile</code></p> Source code in <code>client/ayon_zbrush/api/pipeline.py</code> <pre><code>def remove_tmp_data():\n    \"\"\"Remove all temporary data which is created by AYON without\n    saving changes when launching Zbrush without enabling `skip\n    opening last workfile`\n\n    \"\"\"\n    work_dir = get_workdir()\n    for name in [ZBRUSH_METADATA_CREATE_CONTEXT,\n                 ZBRUSH_SECTION_NAME_INSTANCES,\n                 ZBRUSH_SECTION_NAME_CONTAINERS]:\n        json_dir = os.path.join(\n            work_dir, \".zbrush_metadata\", name).replace(\n                \"\\\\\", \"/\"\n            )\n        if not os.path.exists(json_dir):\n            continue\n        all_fname_list = [jfile for jfile in os.listdir(json_dir)\n                          if jfile.endswith(\"json\")]\n        for fname in all_fname_list:\n            os.remove(f\"{json_dir}/{fname}\")\n</code></pre>"},{"location":"autoapi/client/ayon_zbrush/api/pipeline.html#client.ayon_zbrush.api.pipeline.save_current_workfile_context","title":"<code>save_current_workfile_context(context)</code>","text":"<p>Save current workfile context data to <code>.zbrush_metadata/{workfile}/key</code></p> <p>This persists the current in-memory context to be set for a specific workfile on disk. Usually used on save to persist the local sessions' workfile context on save.</p> <p>The context data includes things like the project name, folder path, etc.</p> <p>Parameters:</p> Name Type Description Default <code>context</code> <code>dict</code> <p>context data</p> required Source code in <code>client/ayon_zbrush/api/pipeline.py</code> <pre><code>def save_current_workfile_context(context):\n    \"\"\"Save current workfile context data to `.zbrush_metadata/{workfile}/key`\n\n    This persists the current in-memory context to be set for a specific\n    workfile on disk. Usually used on save to persist the local sessions'\n    workfile context on save.\n\n    The context data includes things like the project name, folder path,\n    etc.\n\n    Args:\n        context (dict): context data\n\n    \"\"\"\n    return write_context_metadata(ZBRUSH_SECTION_NAME_CONTEXT, context)\n</code></pre>"},{"location":"autoapi/client/ayon_zbrush/api/pipeline.html#client.ayon_zbrush.api.pipeline.set_current_file","title":"<code>set_current_file(filepath=None)</code>","text":"<p>Function to store current workfile path</p> <p>Parameters:</p> Name Type Description Default <code>filepath</code> <code>str</code> <p>current workfile path. Defaults to None.</p> <code>None</code> Source code in <code>client/ayon_zbrush/api/pipeline.py</code> <pre><code>def set_current_file(filepath=None):\n    \"\"\"Function to store current workfile path\n\n    Args:\n        filepath (str, optional): current workfile path. Defaults to None.\n    \"\"\"\n    work_dir = get_workdir()\n    txt_dir = os.path.join(\n        work_dir, \".zbrush_metadata\").replace(\n            \"\\\\\", \"/\"\n    )\n    os.makedirs(txt_dir, exist_ok=True)\n    txt_file = f\"{txt_dir}/current_file.txt\"\n    if filepath is None:\n        with open(txt_file, \"w\"):\n            pass\n        return filepath\n    filepath_check = tmp_current_file_check()\n    if filepath_check.endswith(\"zpr\"):\n        filepath = os.path.join(\n            os.path.dirname(filepath), filepath_check).replace(\"\\\\\", \"/\")\n    with open (txt_file, \"w\") as current_file:\n        current_file.write(filepath)\n        current_file.close()\n</code></pre>"},{"location":"autoapi/client/ayon_zbrush/api/pipeline.html#client.ayon_zbrush.api.pipeline.tmp_current_file_check","title":"<code>tmp_current_file_check()</code>","text":"<p>Function to find the latest .zpr file used by the user in Zbrush.</p> <p>Returns:</p> Name Type Description <code>file_content</code> <code>str</code> <p>the filepath in .zpr format. If the filepath does not end with '.zpr' format, it returns None.</p> Source code in <code>client/ayon_zbrush/api/pipeline.py</code> <pre><code>def tmp_current_file_check():\n    \"\"\"Function to find the latest .zpr file used\n    by the user in Zbrush.\n\n    Returns:\n        file_content (str): the filepath in .zpr format.\n            If the filepath does not end with '.zpr' format,\n            it returns None.\n    \"\"\"\n    output_file = tempfile.NamedTemporaryFile(\n        mode=\"w\", prefix=\"a_zb_cfc\", suffix=\".txt\", delete=False\n    )\n    output_file.close()\n    output_filepath = output_file.name.replace(\"\\\\\", \"/\")\n    context_data_zscript = (\"\"\"\n[IFreeze,\n\t[MemCreate, currentfile, 1000, 0]\n    [VarSet, currentfile, [FileNameExtract, [FileNameGetLastUsed], 2+4]]\n\t[MemWriteString, currentfile, #filename, 0]\n\t[MemSaveToFile, currentfile, \"{output_filepath}\", 0]\n\t[MemDelete, currentfile]\n]\n\"\"\").format(output_filepath=output_filepath)\n    execute_zscript(context_data_zscript)\n    with open(output_filepath) as data:\n        file_content = str(data.read().strip()).rstrip('\\x00')\n    os.remove(output_filepath)\n    return file_content\n</code></pre>"},{"location":"autoapi/client/ayon_zbrush/api/pipeline.html#client.ayon_zbrush.api.pipeline.write_context_metadata","title":"<code>write_context_metadata(metadata_key, context)</code>","text":"<p>Write context data into the related json which stores in .zbrush_metadata/key folder in the project work directory.</p> <p>The context data includes the project name, folder path and task name.</p> <p>Parameters:</p> Name Type Description Default <code>metadata_key</code> <code>str</code> <p>metadata key</p> required <code>context</code> <code>dict</code> <p>context data</p> required Source code in <code>client/ayon_zbrush/api/pipeline.py</code> <pre><code>def write_context_metadata(metadata_key, context):\n    \"\"\"Write context data into the related json\n    which stores in .zbrush_metadata/key folder\n    in the project work directory.\n\n    The context data includes the project name, folder path\n    and task name.\n\n    Args:\n        metadata_key (str): metadata key\n        context (dict): context data\n    \"\"\"\n    work_dir = get_workdir()\n    json_dir = os.path.join(\n        work_dir, \".zbrush_metadata\", metadata_key).replace(\n            \"\\\\\", \"/\"\n        )\n    os.makedirs(json_dir, exist_ok=True)\n    json_file = f\"{json_dir}/{metadata_key}.json\"\n    if os.path.exists(json_file):\n        with open (json_file, \"r\") as file:\n            value = json.load(file)\n            if value == context:\n                return\n    with open (json_file, \"w\") as file:\n        value = json.dumps(context)\n        file.write(value)\n        file.close()\n</code></pre>"},{"location":"autoapi/client/ayon_zbrush/api/pipeline.html#client.ayon_zbrush.api.pipeline.write_load_metadata","title":"<code>write_load_metadata(data)</code>","text":"<p>Write/Edit the container data into the related json file(\"{subset_name}.json\") which stores in .zbrush_metadata/{workfile}/containers folder. This persists the current in-memory containers data to be set for updating and switching assets in scene inventory.</p> <p>Parameters:</p> Name Type Description Default <code>metadata_key</code> <code>str</code> <p>metadata key for container</p> required <code>data</code> <code>list</code> <p>list of container data</p> required Source code in <code>client/ayon_zbrush/api/pipeline.py</code> <pre><code>def write_load_metadata(data):\n    \"\"\"Write/Edit the container data into the related json file(\"{subset_name}.json\")\n    which stores in .zbrush_metadata/{workfile}/containers folder.\n    This persists the current in-memory containers data\n    to be set for updating and switching assets in scene inventory.\n\n    Args:\n        metadata_key (str): metadata key for container\n        data (list): list of container data\n    \"\"\"\n    current_file = registered_host().get_current_workfile()\n    if current_file:\n        current_file = os.path.splitext(\n            os.path.basename(current_file))[0].strip()\n    work_dir = get_workdir()\n    name = next((d[\"name\"] for d in data), None)\n    json_dir = os.path.join(\n        work_dir, \".zbrush_metadata\",\n        current_file, ZBRUSH_SECTION_NAME_CONTAINERS).replace(\n            \"\\\\\", \"/\"\n        )\n    os.makedirs(json_dir, exist_ok=True)\n    json_file = f\"{json_dir}/{name}.json\"\n    if os.path.exists(json_file):\n        with open(json_file, \"w\"):\n            pass\n\n    with open(json_file, \"w\") as file:\n        value = json.dumps(data)\n        file.write(value)\n        file.close()\n</code></pre>"},{"location":"autoapi/client/ayon_zbrush/api/pipeline.html#client.ayon_zbrush.api.pipeline.write_workfile_metadata","title":"<code>write_workfile_metadata(metadata_key, data=None)</code>","text":"<p>Function to write workfile metadata(such as creator's context data and instance data) in .zbrushmetadata/{workfile}/{metadata_key} folder This persists the current in-memory instance/creator's context data to be set for a specific workfile on disk. Usually used on save to persist updating instance data and context data used in publisher.</p> <p>Parameters:</p> Name Type Description Default <code>metadata_key</code> <code>str</code> <p>metadata key</p> required <code>data</code> <code>list</code> <p>metadata. Defaults to None.</p> <code>None</code> Source code in <code>client/ayon_zbrush/api/pipeline.py</code> <pre><code>def write_workfile_metadata(metadata_key, data=None):\n    \"\"\"Function to write workfile metadata(such as creator's context data\n    and instance data) in .zbrushmetadata/{workfile}/{metadata_key} folder\n    This persists the current in-memory instance/creator's context data\n    to be set for a specific workfile on disk. Usually used on save to\n    persist updating instance data and context data used in publisher.\n\n    Args:\n        metadata_key (str): metadata key\n        data (list, optional): metadata. Defaults to None.\n    \"\"\"\n    if data is None:\n        data = []\n    current_file = registered_host().get_current_workfile()\n    if current_file:\n        current_file = os.path.splitext(\n            os.path.basename(current_file))[0].strip()\n    work_dir = get_workdir()\n    json_dir = os.path.join(\n        work_dir, \".zbrush_metadata\",\n        current_file, metadata_key).replace(\n            \"\\\\\", \"/\"\n        )\n    os.makedirs(json_dir, exist_ok=True)\n    with open (f\"{json_dir}/{metadata_key}.json\", \"w\") as file:\n        value = json.dumps(data)\n        file.write(value)\n        file.close()\n</code></pre>"},{"location":"autoapi/client/ayon_zbrush/api/plugin.html","title":"plugin","text":""},{"location":"autoapi/client/ayon_zbrush/hooks/index.html","title":"hooks","text":""},{"location":"autoapi/client/ayon_zbrush/hooks/create_zmenu_script.html","title":"create_zmenu_script","text":"<p>Pre-launch to force zbrush startup script.</p>"},{"location":"autoapi/client/ayon_zbrush/hooks/create_zmenu_script.html#client.ayon_zbrush.hooks.create_zmenu_script.CreateZMenuScript","title":"<code>CreateZMenuScript</code>","text":"<p>               Bases: <code>PreLaunchHook</code></p> <p>Create AYON Menu Zscript to Zbrush.</p> <p>Note that this works in combination whit Zbrush startup script to successfully install zscripts.menu</p> <p>Hook <code>GlobalHostDataHook</code> must be executed before this hook.</p> Source code in <code>client/ayon_zbrush/hooks/create_zmenu_script.py</code> <pre><code>class CreateZMenuScript(PreLaunchHook):\n    \"\"\"Create AYON Menu Zscript to Zbrush.\n\n    Note that this works in combination whit Zbrush startup script\n    to successfully install zscripts.menu\n\n    Hook `GlobalHostDataHook` must be executed before this hook.\n    \"\"\"\n    app_groups = {\"zbrush\"}\n    order = 12\n    launch_types = {LaunchTypes.local}\n\n    def execute(self):\n\n        zscript_path = os.path.join(ZBRUSH_HOST_DIR, \"api\", \"zscripts\")\n        os.makedirs(zscript_path, exist_ok=True)\n        zscript_txt = os.path.join(zscript_path, \"ayon_zbrush_menu.txt\")\n        with open(zscript_txt, \"w\") as zscript:\n            zscript.write(self.ayon_menu())\n            zscript.close()\n\n    def ayon_menu(self):\n        python_exe = os.environ[\"AYON_EXECUTABLE\"]\n        ayon_script = (\"\"\"\n// Set a variable to \" so we can quote the command line arguments for ShellExecute\n[VarSet, q, [StrFromAsc, 34]]\n[VarSet, addon, \"addon\"]\n[VarSet, zbrush, \"zbrush\"]\n[VarSet, zscript, \"run-with-zscript\"]\n[VarSet, arg, \"--launcher\"]\n[IPalette, \"AYON\", 1]\n\n[ISubPalette, \"AYON:Tools\", 2]\n\n// Load\n[IButton, \"AYON:Tools:Load...\", \"Open AYON Loader\",\n\t[VarSet, loader, \"loader_tool\"]\n\t[VarSet, cmd, [StrMerge, start, \" \",#q, #q, \"  \",#q, \"{launch}\", #q]]\n\t[VarSet, cmd, [StrMerge, cmd, \" \", #addon, #q]]\n\t[VarSet, cmd, [StrMerge, cmd, #q,  \" \", #zbrush, #q]]\n\t[VarSet, cmd, [StrMerge, cmd, #q,  \" \", #zscript, #q]]\n\t[VarSet, cmd, [StrMerge, cmd, #q,  \" \", #arg, #q]]\n\t[VarSet, cmd, [StrMerge, cmd, #q,  \" \", #loader, #q]]\n\t[ShellExecute, cmd], 0, 120\n]\n\n// Publish\n[IButton, \"AYON:Tools:Publish...\", \"Open AYON Publisher\",\n\t[VarSet, publisher, \"publish_tool\"]\n\t[VarSet, cmd, [StrMerge, start, \" \",#q, #q, \"  \",#q, \"{launch}\", #q]]\n\t[VarSet, cmd, [StrMerge, cmd, \" \", #addon, #q]]\n\t[VarSet, cmd, [StrMerge, cmd, #q,  \" \", #zbrush, #q]]\n\t[VarSet, cmd, [StrMerge, cmd, #q,  \" \", #zscript, #q]]\n\t[VarSet, cmd, [StrMerge, cmd, #q,  \" \", #arg, #q]]\n\t[VarSet, cmd, [StrMerge, cmd, #q,  \" \", #publisher, #q]]\n\t[ShellExecute, cmd], 0, 120\n]\n\n// Manage\n[IButton, \"AYON:Tools:Manage...\", \"Open AYON Scene Inventory UI\",\n\t[VarSet, scene_inventory, \"scene_inventory_tool\"]\n\t[VarSet, cmd, [StrMerge, start, \" \",#q, #q, \"  \",#q, \"{launch}\", #q]]\n\t[VarSet, cmd, [StrMerge, cmd, \" \", #addon, #q]]\n\t[VarSet, cmd, [StrMerge, cmd, #q,  \" \", #zbrush, #q]]\n\t[VarSet, cmd, [StrMerge, cmd, #q,  \" \", #zscript, #q]]\n\t[VarSet, cmd, [StrMerge, cmd, #q,  \" \", #arg, #q]]\n\t[VarSet, cmd, [StrMerge, cmd, #q,  \" \", #scene_inventory, #q]]\n\t[ShellExecute, cmd], 0, 120\n]\n\n[ISubPalette, \"AYON:Project\", 2]\n// Workfile\n[IButton, \"AYON:Project:Work Files...\", \"Open AYON Work Files UI\",\n\t[VarSet, workfiles, \"workfiles_tool\"]\n\t[VarSet, cmd, [StrMerge, start, \" \",#q, #q, \"  \",#q, \"{launch}\", #q]]\n\t[VarSet, cmd, [StrMerge, cmd, \" \", #addon, #q]]\n\t[VarSet, cmd, [StrMerge, cmd, #q,  \" \", #zbrush, #q]]\n\t[VarSet, cmd, [StrMerge, cmd, #q,  \" \", #zscript, #q]]\n\t[VarSet, cmd, [StrMerge, cmd, #q,  \" \", #arg, #q]]\n\t[VarSet, cmd, [StrMerge, cmd, #q,  \" \", #workfiles, #q]]\n\t[ShellExecute, cmd], 0, 120\n]\"\"\").format(launch=python_exe)\n        return ayon_script\n</code></pre>"},{"location":"autoapi/client/ayon_zbrush/hooks/pre_subprocess_no_window.html","title":"pre_subprocess_no_window","text":""},{"location":"autoapi/client/ayon_zbrush/hooks/pre_subprocess_no_window.html#client.ayon_zbrush.hooks.pre_subprocess_no_window.LaunchServerNoWindow","title":"<code>LaunchServerNoWindow</code>","text":"<p>               Bases: <code>PreLaunchHook</code></p> <p>Specifically for Zbrush to make the AYON tools launching faster</p> Source code in <code>client/ayon_zbrush/hooks/pre_subprocess_no_window.py</code> <pre><code>class LaunchServerNoWindow(PreLaunchHook):\n    \"\"\"Specifically for Zbrush to make the AYON tools launching faster\n    \"\"\"\n\n    # Should be as last hook because must change launch arguments to string\n    order = 1000\n    app_groups = {\"zbrush\"}\n    platforms = {\"windows\"}\n    launch_types = {LaunchTypes.local}\n\n    def execute(self):\n\n        self.launch_context.kwargs.update({\n            \"creationflags\": subprocess.CREATE_NEW_CONSOLE,\n            \"stdout\": None,\n            \"stderr\": None\n        })\n</code></pre>"},{"location":"autoapi/client/ayon_zbrush/hooks/zbrush_startup_script.html","title":"zbrush_startup_script","text":"<p>Pre-launch to force zbrush startup script.</p>"},{"location":"autoapi/client/ayon_zbrush/hooks/zbrush_startup_script.html#client.ayon_zbrush.hooks.zbrush_startup_script.ZBrushStartupScript","title":"<code>ZBrushStartupScript</code>","text":"<p>               Bases: <code>PreLaunchHook</code></p> <p>Inject AYON environment to Zbrush.</p> <p>Note that this works in combination whit Zbrush startup script that is creating the environment variable for the AYON Plugin</p> <p>Hook <code>GlobalHostDataHook</code> must be executed before this hook.</p> Source code in <code>client/ayon_zbrush/hooks/zbrush_startup_script.py</code> <pre><code>class ZBrushStartupScript(PreLaunchHook):\n    \"\"\"Inject AYON environment to Zbrush.\n\n    Note that this works in combination whit Zbrush startup script that\n    is creating the environment variable for the AYON Plugin\n\n    Hook `GlobalHostDataHook` must be executed before this hook.\n    \"\"\"\n    app_groups = {\"zbrush\"}\n    order = 11\n    launch_types = {LaunchTypes.local}\n\n    def execute(self):\n        executable_path = self.launch_context.launch_args.pop(0)\n        self.launch_context.env[\"ZBRUSH_EXE\"] = executable_path\n        # Pop rest of launch arguments - There should not be other arguments!\n        remainders = []\n        while self.launch_context.launch_args:\n            remainders.append(self.launch_context.launch_args.pop(0))\n\n        new_launch_args = get_ayon_launcher_args(\n            \"run\", get_launch_script_path(), executable_path\n        )\n\n        # Append as whole list as these arguments should not be separated\n        self.launch_context.launch_args.append(new_launch_args)\n        startup_args = [\n            os.path.join(ZBRUSH_HOST_DIR, \"startup\", \"startup.txt\"),\n        ]\n        self.launch_context.launch_args.append(startup_args)\n\n        if remainders:\n            self.log.warning((\n                \"There are unexpected launch arguments in Zbrush launch. {}\"\n            ).format(str(remainders)))\n            self.launch_context.launch_args.extend(remainders)\n</code></pre>"},{"location":"autoapi/client/ayon_zbrush/plugins/index.html","title":"plugins","text":""},{"location":"autoapi/client/ayon_zbrush/plugins/create/index.html","title":"create","text":""},{"location":"autoapi/client/ayon_zbrush/plugins/create/create_model.html","title":"create_model","text":"<p>Creator plugin for model.</p>"},{"location":"autoapi/client/ayon_zbrush/plugins/create/create_model.html#client.ayon_zbrush.plugins.create.create_model.CreateModel","title":"<code>CreateModel</code>","text":"<p>               Bases: <code>ZbrushCreator</code></p> <p>Creator plugin for Model.</p> Source code in <code>client/ayon_zbrush/plugins/create/create_model.py</code> <pre><code>class CreateModel(plugin.ZbrushCreator):\n    \"\"\"Creator plugin for Model.\"\"\"\n    identifier = \"io.ayon.creators.zbrush.model\"\n    label = \"Model\"\n    product_type = \"model\"\n    icon = \"cube\"\n    export_format = \"obj\"\n\n    def create(self, product_name, instance_data, pre_create_data):\n        creator_attributes = instance_data.setdefault(\n            \"creator_attributes\", dict())\n        for key in [\"subd_level\", \"exportFormat\"]:\n            if key in pre_create_data:\n                creator_attributes[key] = pre_create_data[key]\n\n        super(CreateModel, self).create(\n            product_name,\n            instance_data,\n            pre_create_data)\n\n    def get_instance_attr_defs(self):\n        export_format_enum = [\"abc\", \"fbx\", \"obj\"]\n        return [\n            NumberDef(\n                \"subd_level\",\n                label=\"Subdivision Level\",\n                decimals=0,\n                minimum=-10,\n                default=0,\n                tooltip=(\n                    \"A level of 1 or higher sets the level to export at.\\n\"\n                    \"A level of 0 means 'Use tool's current subdiv level'.\\n\"\n                    \"A level of -1 or lower subtracts from the highest subdiv,\"\n                    \"\\n    for example -1 means highest subdiv level.\"\n                )\n            ),\n            EnumDef(\"exportFormat\",\n                    export_format_enum,\n                    default=self.export_format,\n                    label=\"Export Format Options\")\n        ]\n\n    def get_pre_create_attr_defs(self):\n        return self.get_instance_attr_defs()\n</code></pre>"},{"location":"autoapi/client/ayon_zbrush/plugins/create/create_workfile.html","title":"create_workfile","text":"<p>Creator plugin for creating workfiles.</p>"},{"location":"autoapi/client/ayon_zbrush/plugins/create/create_workfile.html#client.ayon_zbrush.plugins.create.create_workfile.CreateWorkfile","title":"<code>CreateWorkfile</code>","text":"<p>               Bases: <code>ZbrushAutoCreator</code></p> <p>Workfile auto-creator.</p> Source code in <code>client/ayon_zbrush/plugins/create/create_workfile.py</code> <pre><code>class CreateWorkfile(plugin.ZbrushAutoCreator):\n    \"\"\"Workfile auto-creator.\"\"\"\n    identifier = \"io.ayon.creators.zbrush.workfile\"\n    label = \"Workfile\"\n    product_type = \"workfile\"\n    icon = \"fa5.file\"\n\n    default_variant = \"Main\"\n\n    def create(self):\n        variant = self.default_variant\n        current_instance = next(\n            (\n                instance for instance in self.create_context.instances\n                if instance.creator_identifier == self.identifier\n            ), None)\n        project_name = self.project_name\n        folder_path = self.create_context.get_current_folder_path()\n        task_name = self.create_context.get_current_task_name()\n        host_name = self.create_context.host_name\n\n        if current_instance is None:\n            current_instance_asset = None\n        else:\n            current_instance_asset = current_instance[\"folderPath\"]\n\n        if current_instance is None:\n            folder_entity = ayon_api.get_folder_by_path(\n                project_name, folder_path\n            )\n            task_entity = ayon_api.get_task_by_name(\n                project_name, folder_entity[\"id\"], task_name\n            )\n            product_name = self.get_product_name(\n                project_name,\n                folder_entity,\n                task_entity,\n                variant,\n                host_name,\n            )\n            data = {\n                \"task\": task_name,\n                \"variant\": variant,\n                \"folderPath\": folder_path,\n            }\n\n            new_instance = CreatedInstance(\n                self.product_type, product_name, data, self\n            )\n            instances_data = self.host.list_instances()\n            instances_data.append(new_instance.data_to_store())\n            self.host.write_instances(instances_data)\n            self._add_instance_to_context(new_instance)\n\n        elif (\n            current_instance_asset != folder_path\n            or current_instance[\"task\"] != task_name\n        ):\n            # Update instance context if is not the same\n            folder_entity = ayon_api.get_folder_by_path(\n                project_name, folder_path\n            )\n            task_entity = ayon_api.get_task_by_name(\n                project_name, folder_entity[\"id\"], task_name\n            )\n            product_name = self.get_product_name(\n                variant, task_entity, folder_entity, project_name, host_name\n            )\n            current_instance[\"folderPath\"] = folder_path\n            current_instance[\"task\"] = task_entity[\"name\"]\n            current_instance[\"productName\"] = product_name\n</code></pre>"},{"location":"autoapi/client/ayon_zbrush/plugins/load/index.html","title":"load","text":""},{"location":"autoapi/client/ayon_zbrush/plugins/load/load_mesh.html","title":"load_mesh","text":""},{"location":"autoapi/client/ayon_zbrush/plugins/load/load_mesh.html#client.ayon_zbrush.plugins.load.load_mesh.MeshLoader","title":"<code>MeshLoader</code>","text":"<p>               Bases: <code>LoaderPlugin</code></p> <p>Zbrush Model Loader.</p> Source code in <code>client/ayon_zbrush/plugins/load/load_mesh.py</code> <pre><code>class MeshLoader(load.LoaderPlugin):\n    \"\"\"Zbrush Model Loader.\"\"\"\n\n    product_types = {\"model\"}\n    representations = {\"abc\", \"fbx\", \"obj\", \"ma\"}\n    order = -9\n    icon = \"code-fork\"\n    color = \"white\"\n\n    def load(self, context, name=None, namespace=None, data=None):\n        file_path = os.path.normpath(self.filepath_from_context(context))\n        load_zscript = \"\"\"\n[IFreeze,\n[VarSet, filename, \"{filepath}\"]\n[FileNameSetNext, #filename]\n[IKeyPress, 13, [IPress, Tool:Import:Import]]\n]\n\n\"\"\".format(filepath=file_path)\n        execute_zscript(load_zscript)\n\n        return containerise(\n            name,\n            context,\n            loader=self.__class__.__name__)\n\n    def update(self, container, context):\n        repre_entity = context[\"representation\"]\n        path = get_representation_path(repre_entity)\n        load_zscript = \"\"\"\n[IFreeze,\n[VarSet, filename, \"{filepath}\"]\n[FileNameSetNext, #filename]\n[IKeyPress, 13, [IPress, Tool:Import:Import]]\n]\n\n\"\"\".format(filepath=path)\n        execute_zscript(load_zscript)\n        representation_id = str(repre_entity[\"id\"])\n        imprint(container, representation_id)\n\n    def switch(self, container, context):\n        self.update(container, context)\n\n    def remove(self, container):\n        # TODO: figure out how to delete imported object\n        # remove the bind with the container data\n        remove_subtool(container[\"objectName\"])\n        return remove_container_data(container[\"objectName\"])\n</code></pre>"},{"location":"autoapi/client/ayon_zbrush/plugins/publish/index.html","title":"publish","text":""},{"location":"autoapi/client/ayon_zbrush/plugins/publish/collect_current_file.html","title":"collect_current_file","text":""},{"location":"autoapi/client/ayon_zbrush/plugins/publish/collect_workfile.html","title":"collect_workfile","text":""},{"location":"autoapi/client/ayon_zbrush/plugins/publish/extract_model.html","title":"extract_model","text":""},{"location":"autoapi/client/ayon_zbrush/plugins/publish/extract_model.html#client.ayon_zbrush.plugins.publish.extract_model.ExtractModel","title":"<code>ExtractModel</code>","text":"<p>               Bases: <code>Extractor</code>, <code>AYONPyblishPluginMixin</code></p> <p>Extract PolyMesh(.fbx, .abc, .obj) in Zbrush</p> Source code in <code>client/ayon_zbrush/plugins/publish/extract_model.py</code> <pre><code>class ExtractModel(publish.Extractor,\n                   AYONPyblishPluginMixin):\n    \"\"\"\n    Extract PolyMesh(.fbx, .abc, .obj) in Zbrush\n    \"\"\"\n\n    order = pyblish.api.ExtractorOrder - 0.05\n    label = \"Extract Model\"\n    hosts = [\"zbrush\"]\n    families = [\"model\"]\n\n    def process(self, instance):\n        creator_attrs = instance.data[\"creator_attributes\"]\n        subd_level = creator_attrs.get(\"subd_level\")\n        export_format = creator_attrs.get(\"exportFormat\")\n        stagingdir = self.staging_dir(instance)\n        filename = f\"{instance.name}.{export_format}\"\n        filepath = os.path.join(stagingdir, filename)\n\n        if \"representations\" not in instance.data:\n            instance.data[\"representations\"] = []\n\n        export_tool(filepath, subd_level)\n        representation = {\n            \"name\": export_format,\n            \"ext\": export_format,\n            \"files\": filename,\n            \"stagingDir\": stagingdir,\n        }\n\n        instance.data[\"representations\"].append(representation)\n        self.log.info(\n            \"Extracted instance '%s' to: %s\" % (instance.name, filepath)\n        )\n</code></pre>"},{"location":"autoapi/client/ayon_zbrush/plugins/publish/increment_workfile_version.html","title":"increment_workfile_version","text":""},{"location":"autoapi/client/ayon_zbrush/plugins/publish/increment_workfile_version.html#client.ayon_zbrush.plugins.publish.increment_workfile_version.IncrementWorkfileVersion","title":"<code>IncrementWorkfileVersion</code>","text":"<p>               Bases: <code>ContextPlugin</code></p> <p>Save current file</p> Source code in <code>client/ayon_zbrush/plugins/publish/increment_workfile_version.py</code> <pre><code>class IncrementWorkfileVersion(pyblish.api.ContextPlugin):\n    \"\"\"Save current file\"\"\"\n\n    label = \"Save current file\"\n    order = pyblish.api.ExtractorOrder - 0.49\n    hosts = [\"zbrush\"]\n    families = [\"workfile\"]\n\n    def process(self, context):\n        host = registered_host()\n        path = context.data[\"currentFile\"]\n        self.log.info(f\"Increment and save workfile: {path}\")\n        host.save_workfile(version_up(path))\n</code></pre>"},{"location":"autoapi/client/ayon_zbrush/plugins/publish/validate_edit_mode.html","title":"validate_edit_mode","text":""},{"location":"autoapi/client/ayon_zbrush/plugins/publish/validate_edit_mode.html#client.ayon_zbrush.plugins.publish.validate_edit_mode.ValidateEditMode","title":"<code>ValidateEditMode</code>","text":"<p>               Bases: <code>ContextPlugin</code>, <code>OptionalPyblishPluginMixin</code></p> <p>Validates whether zbrush is in edit mode before exporting model with tool settings.</p> Source code in <code>client/ayon_zbrush/plugins/publish/validate_edit_mode.py</code> <pre><code>class ValidateEditMode(pyblish.api.ContextPlugin,\n                       OptionalPyblishPluginMixin):\n    \"\"\"Validates whether zbrush is in edit mode before\n    exporting model with tool settings.\n    \"\"\"\n\n    label = \"Validate Edit Mode\"\n    order = ValidateContentsOrder\n    families = [\"model\"]\n    hosts = [\"zbrush\"]\n    optional = True\n    actions = [RepairContextAction]\n\n    def process(self, context):\n        edit_mode = is_in_edit_mode()\n        if int(edit_mode) == 0:\n            raise PublishValidationError(\n                \"Zbrush is not in edit mode, \"\n                \"please make sure it is in edit mode before extraction.\"\n            )\n\n    @classmethod\n    def repair(cls, context):\n        # Enable Transform:Edit state\n        execute_zscript(\"[ISet, Transform:Edit, 1]\")\n</code></pre>"},{"location":"autoapi/server/index.html","title":"server","text":""},{"location":"autoapi/server/settings/index.html","title":"settings","text":""},{"location":"autoapi/server/settings/main.html","title":"main","text":""}]}